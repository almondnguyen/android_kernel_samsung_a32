/* SPDX-License-Identifier: GPL-2.0 */
#ifndef __S6E3FC3_MDNIE_H__
#define __S6E3FC3_MDNIE_H__

/* 2020.02.02 */

static struct mdnie_scr_info scr_info = {
	.index = 5,
	.cr = 2,		/* ASCR_WIDE_CR[7:0] */
	.wr = 20,		/* ASCR_WIDE_WR[7:0] */
	.wg = 21,		/* ASCR_WIDE_WG[7:0] */
	.wb = 22		/* ASCR_WIDE_WB[7:0] */
};

static struct mdnie_night_info night_info = {
	.max_w = 21,
	.max_h = 102
};

static struct mdnie_color_lens_info color_lens_info = {
	.max_color = 12,
	.max_level = 9,
	.max_w = 21
};

static inline int color_offset_f1(int x, int y)
{
	return ((y << 10) - (((x << 10) * 39) / 38) - (95 << 10)) >> 10;
}
static inline int color_offset_f2(int x, int y)
{
	return ((y << 10) - (((x << 10) * 36) / 35) - (56 << 10)) >> 10;
}
static inline int color_offset_f3(int x, int y)
{
	return ((y << 10) + (((x << 10) * 7) / 1) - (24728 << 10)) >> 10;
}
static inline int color_offset_f4(int x, int y)
{
	return ((y << 10) + (((x << 10) * 25) / 7) - (14031 << 10)) >> 10;
}

/* color coordination order is WR, WG, WB */
static unsigned char coordinate_data_1[] = {
	0xff, 0xff, 0xff, /* dummy */
	0xff, 0xfd, 0xfc, /* Tune_1 */
	0xff, 0xfe, 0xff, /* Tune_2 */
	0xfc, 0xfc, 0xff, /* Tune_3 */
	0xff, 0xfe, 0xfd, /* Tune_4 */
	0xff, 0xff, 0xff, /* Tune_5 */
	0xfc, 0xfd, 0xff, /* Tune_6 */
	0xfe, 0xff, 0xfc, /* Tune_7 */
	0xfe, 0xff, 0xfe, /* Tune_8 */
	0xfc, 0xfe, 0xff, /* Tune_9 */
};

static unsigned char coordinate_data_2[] = {
	0xff, 0xff, 0xff, /* dummy */
	0xff, 0xfa, 0xf0, /* Tune_1 */
	0xff, 0xfa, 0xf0, /* Tune_2 */
	0xff, 0xfa, 0xf0, /* Tune_3 */
	0xff, 0xfa, 0xf0, /* Tune_4 */
	0xff, 0xfa, 0xf0, /* Tune_5 */
	0xff, 0xfa, 0xf0, /* Tune_6 */
	0xff, 0xfa, 0xf0, /* Tune_7 */
	0xff, 0xfa, 0xf0, /* Tune_8 */
	0xff, 0xfa, 0xf0, /* Tune_9 */
};

static unsigned char *coordinate_data[MODE_MAX] = {
	coordinate_data_2,
	coordinate_data_2,
	coordinate_data_2,
	coordinate_data_1,
	coordinate_data_1,
	coordinate_data_1,
};

static unsigned char adjust_ldu_data_1[] = {
	0xff, 0xff, 0xff,
	0xfd, 0xfd, 0xff,
	0xfb, 0xfb, 0xff,
	0xf9, 0xf8, 0xff,
	0xf6, 0xf6, 0xff,
	0xf4, 0xf4, 0xff,
};

static unsigned char adjust_ldu_data_2[] = {
	0xff, 0xfc, 0xf6,
	0xfd, 0xfa, 0xf6,
	0xfb, 0xf7, 0xf6,
	0xf9, 0xf5, 0xf6,
	0xf4, 0xf0, 0xf6,
	0xf2, 0xee, 0xf6,
};

static unsigned char *adjust_ldu_data[MODE_MAX] = {
	adjust_ldu_data_2,
	adjust_ldu_data_2,
	adjust_ldu_data_2,
	adjust_ldu_data_1,
	adjust_ldu_data_1,
	adjust_ldu_data_1,
};

static unsigned char color_lens_data[] = {
	//Blue
	0xcc, 0x00, 0x33, 0x00, 0xcc, 0x33, 0x00, 0x00, 0xff, 0x00, 0xcc, 0xff, 0xcc, 0x00, 0xff, 0xcc, 0xcc, 0x33, 0xcc, 0xcc, 0xff, /* 20% */
	0xbf, 0x00, 0x40, 0x00, 0xbf, 0x40, 0x00, 0x00, 0xff, 0x00, 0xbf, 0xff, 0xbf, 0x00, 0xff, 0xbf, 0xbf, 0x40, 0xbf, 0xbf, 0xff, /* 25% */
	0xb2, 0x00, 0x4d, 0x00, 0xb2, 0x4d, 0x00, 0x00, 0xff, 0x00, 0xb2, 0xff, 0xb2, 0x00, 0xff, 0xb2, 0xb2, 0x4d, 0xb2, 0xb2, 0xff, /* 30% */
	0xa6, 0x00, 0x59, 0x00, 0xa6, 0x59, 0x00, 0x00, 0xff, 0x00, 0xa6, 0xff, 0xa6, 0x00, 0xff, 0xa6, 0xa6, 0x59, 0xa6, 0xa6, 0xff, /* 35% */
	0x99, 0x00, 0x66, 0x00, 0x99, 0x66, 0x00, 0x00, 0xff, 0x00, 0x99, 0xff, 0x99, 0x00, 0xff, 0x99, 0x99, 0x66, 0x99, 0x99, 0xff, /* 40% */
	0x8c, 0x00, 0x73, 0x00, 0x8c, 0x73, 0x00, 0x00, 0xff, 0x00, 0x8c, 0xff, 0x8c, 0x00, 0xff, 0x8c, 0x8c, 0x73, 0x8c, 0x8c, 0xff, /* 45% */
	0x7f, 0x00, 0x80, 0x00, 0x7f, 0x80, 0x00, 0x00, 0xff, 0x00, 0x7f, 0xff, 0x7f, 0x00, 0xff, 0x7f, 0x7f, 0x80, 0x7f, 0x7f, 0xff, /* 50% */
	0x73, 0x00, 0x8c, 0x00, 0x73, 0x8c, 0x00, 0x00, 0xff, 0x00, 0x73, 0xff, 0x73, 0x00, 0xff, 0x73, 0x73, 0x8c, 0x73, 0x73, 0xff, /* 55% */
	0x66, 0x00, 0x99, 0x00, 0x66, 0x99, 0x00, 0x00, 0xff, 0x00, 0x66, 0xff, 0x66, 0x00, 0xff, 0x66, 0x66, 0x99, 0x66, 0x66, 0xff, /* 60% */

	//Azure
	0xcc, 0x19, 0x33, 0x00, 0xe5, 0x33, 0x00, 0x19, 0xff, 0x00, 0xe5, 0xff, 0xcc, 0x19, 0xff, 0xcc, 0xe5, 0x33, 0xcc, 0xe5, 0xff, /* 20% */
	0xbf, 0x20, 0x40, 0x00, 0xdf, 0x40, 0x00, 0x20, 0xff, 0x00, 0xdf, 0xff, 0xbf, 0x20, 0xff, 0xbf, 0xdf, 0x40, 0xbf, 0xdf, 0xff, /* 25% */
	0xb2, 0x26, 0x4d, 0x00, 0xd8, 0x4d, 0x00, 0x26, 0xff, 0x00, 0xd8, 0xff, 0xb2, 0x26, 0xff, 0xb2, 0xd8, 0x4d, 0xb2, 0xd8, 0xff, /* 30% */
	0xa6, 0x2c, 0x59, 0x00, 0xd2, 0x59, 0x00, 0x2c, 0xff, 0x00, 0xd2, 0xff, 0xa6, 0x2c, 0xff, 0xa6, 0xd2, 0x59, 0xa6, 0xd2, 0xff, /* 35% */
	0x99, 0x33, 0x66, 0x00, 0xcc, 0x66, 0x00, 0x33, 0xff, 0x00, 0xcc, 0xff, 0x99, 0x33, 0xff, 0x99, 0xcc, 0x66, 0x99, 0xcc, 0xff, /* 40% */
	0x8c, 0x39, 0x73, 0x00, 0xc5, 0x73, 0x00, 0x39, 0xff, 0x00, 0xc5, 0xff, 0x8c, 0x39, 0xff, 0x8c, 0xc5, 0x73, 0x8c, 0xc5, 0xff, /* 45% */
	0x7f, 0x40, 0x80, 0x00, 0xbf, 0x80, 0x00, 0x40, 0xff, 0x00, 0xbf, 0xff, 0x7f, 0x40, 0xff, 0x7f, 0xbf, 0x80, 0x7f, 0xbf, 0xff, /* 50% */
	0x73, 0x46, 0x8c, 0x00, 0xb9, 0x8c, 0x00, 0x46, 0xff, 0x00, 0xb9, 0xff, 0x73, 0x46, 0xff, 0x73, 0xb9, 0x8c, 0x73, 0xb9, 0xff, /* 55% */
	0x66, 0x4c, 0x99, 0x00, 0xb2, 0x99, 0x00, 0x4c, 0xff, 0x00, 0xb2, 0xff, 0x66, 0x4c, 0xff, 0x66, 0xb2, 0x99, 0x66, 0xb2, 0xff, /* 60% */

	//Cyan
	0xcc, 0x33, 0x33, 0x00, 0xff, 0x33, 0x00, 0x33, 0xff, 0x00, 0xff, 0xff, 0xcc, 0x33, 0xff, 0xcc, 0xff, 0x33, 0xcc, 0xff, 0xff, /* 20% */
	0xbf, 0x40, 0x40, 0x00, 0xff, 0x40, 0x00, 0x40, 0xff, 0x00, 0xff, 0xff, 0xbf, 0x40, 0xff, 0xbf, 0xff, 0x40, 0xbf, 0xff, 0xff, /* 25% */
	0xb2, 0x4d, 0x4d, 0x00, 0xff, 0x4d, 0x00, 0x4d, 0xff, 0x00, 0xff, 0xff, 0xb2, 0x4d, 0xff, 0xb2, 0xff, 0x4d, 0xb2, 0xff, 0xff, /* 30% */
	0xa6, 0x59, 0x59, 0x00, 0xff, 0x59, 0x00, 0x59, 0xff, 0x00, 0xff, 0xff, 0xa6, 0x59, 0xff, 0xa6, 0xff, 0x59, 0xa6, 0xff, 0xff, /* 35% */
	0x99, 0x66, 0x66, 0x00, 0xff, 0x66, 0x00, 0x66, 0xff, 0x00, 0xff, 0xff, 0x99, 0x66, 0xff, 0x99, 0xff, 0x66, 0x99, 0xff, 0xff, /* 40% */
	0x8c, 0x73, 0x73, 0x00, 0xff, 0x73, 0x00, 0x73, 0xff, 0x00, 0xff, 0xff, 0x8c, 0x73, 0xff, 0x8c, 0xff, 0x73, 0x8c, 0xff, 0xff, /* 45% */
	0x7f, 0x80, 0x80, 0x00, 0xff, 0x80, 0x00, 0x80, 0xff, 0x00, 0xff, 0xff, 0x7f, 0x80, 0xff, 0x7f, 0xff, 0x80, 0x7f, 0xff, 0xff, /* 50% */
	0x73, 0x8c, 0x8c, 0x00, 0xff, 0x8c, 0x00, 0x8c, 0xff, 0x00, 0xff, 0xff, 0x73, 0x8c, 0xff, 0x73, 0xff, 0x8c, 0x73, 0xff, 0xff, /* 55% */
	0x66, 0x99, 0x99, 0x00, 0xff, 0x99, 0x00, 0x99, 0xff, 0x00, 0xff, 0xff, 0x66, 0x99, 0xff, 0x66, 0xff, 0x99, 0x66, 0xff, 0xff, /* 60% */

	//Spring green
	0xcc, 0x33, 0x19, 0x00, 0xff, 0x19, 0x00, 0x33, 0xe5, 0x00, 0xff, 0xe5, 0xcc, 0x33, 0xe5, 0xcc, 0xff, 0x19, 0xcc, 0xff, 0xe5, /* 20% */
	0xbf, 0x40, 0x20, 0x00, 0xff, 0x20, 0x00, 0x40, 0xdf, 0x00, 0xff, 0xdf, 0xbf, 0x40, 0xdf, 0xbf, 0xff, 0x20, 0xbf, 0xff, 0xdf, /* 25% */
	0xb2, 0x4d, 0x26, 0x00, 0xff, 0x26, 0x00, 0x4d, 0xd8, 0x00, 0xff, 0xd8, 0xb2, 0x4d, 0xd8, 0xb2, 0xff, 0x26, 0xb2, 0xff, 0xd8, /* 30% */
	0xa6, 0x59, 0x2c, 0x00, 0xff, 0x2c, 0x00, 0x59, 0xd2, 0x00, 0xff, 0xd2, 0xa6, 0x59, 0xd2, 0xa6, 0xff, 0x2c, 0xa6, 0xff, 0xd2, /* 35% */
	0x99, 0x66, 0x33, 0x00, 0xff, 0x33, 0x00, 0x66, 0xcc, 0x00, 0xff, 0xcc, 0x99, 0x66, 0xcc, 0x99, 0xff, 0x33, 0x99, 0xff, 0xcc, /* 40% */
	0x8c, 0x73, 0x39, 0x00, 0xff, 0x39, 0x00, 0x73, 0xc5, 0x00, 0xff, 0xc5, 0x8c, 0x73, 0xc5, 0x8c, 0xff, 0x39, 0x8c, 0xff, 0xc5, /* 45% */
	0x7f, 0x80, 0x40, 0x00, 0xff, 0x40, 0x00, 0x80, 0xbf, 0x00, 0xff, 0xbf, 0x7f, 0x80, 0xbf, 0x7f, 0xff, 0x40, 0x7f, 0xff, 0xbf, /* 50% */
	0x73, 0x8c, 0x46, 0x00, 0xff, 0x46, 0x00, 0x8c, 0xb9, 0x00, 0xff, 0xb9, 0x73, 0x8c, 0xb9, 0x73, 0xff, 0x46, 0x73, 0xff, 0xb9, /* 55% */
	0x66, 0x99, 0x4c, 0x00, 0xff, 0x4c, 0x00, 0x99, 0xb2, 0x00, 0xff, 0xb2, 0x66, 0x99, 0xb2, 0x66, 0xff, 0x4c, 0x66, 0xff, 0xb2, /* 60% */

	//Green
	0xcc, 0x33, 0x00, 0x00, 0xff, 0x00, 0x00, 0x33, 0xcc, 0x00, 0xff, 0xcc, 0xcc, 0x33, 0xcc, 0xcc, 0xff, 0x00, 0xcc, 0xff, 0xcc, /* 20% */
	0xbf, 0x40, 0x00, 0x00, 0xff, 0x00, 0x00, 0x40, 0xbf, 0x00, 0xff, 0xbf, 0xbf, 0x40, 0xbf, 0xbf, 0xff, 0x00, 0xbf, 0xff, 0xbf, /* 25% */
	0xb2, 0x4d, 0x00, 0x00, 0xff, 0x00, 0x00, 0x4d, 0xb2, 0x00, 0xff, 0xb2, 0xb2, 0x4d, 0xb2, 0xb2, 0xff, 0x00, 0xb2, 0xff, 0xb2, /* 30% */
	0xa6, 0x59, 0x00, 0x00, 0xff, 0x00, 0x00, 0x59, 0xa6, 0x00, 0xff, 0xa6, 0xa6, 0x59, 0xa6, 0xa6, 0xff, 0x00, 0xa6, 0xff, 0xa6, /* 35% */
	0x99, 0x66, 0x00, 0x00, 0xff, 0x00, 0x00, 0x66, 0x99, 0x00, 0xff, 0x99, 0x99, 0x66, 0x99, 0x99, 0xff, 0x00, 0x99, 0xff, 0x99, /* 40% */
	0x8c, 0x73, 0x00, 0x00, 0xff, 0x00, 0x00, 0x73, 0x8c, 0x00, 0xff, 0x8c, 0x8c, 0x73, 0x8c, 0x8c, 0xff, 0x00, 0x8c, 0xff, 0x8c, /* 45% */
	0x7f, 0x80, 0x00, 0x00, 0xff, 0x00, 0x00, 0x80, 0x7f, 0x00, 0xff, 0x7f, 0x7f, 0x80, 0x7f, 0x7f, 0xff, 0x00, 0x7f, 0xff, 0x7f, /* 50% */
	0x73, 0x8c, 0x00, 0x00, 0xff, 0x00, 0x00, 0x8c, 0x73, 0x00, 0xff, 0x73, 0x73, 0x8c, 0x73, 0x73, 0xff, 0x00, 0x73, 0xff, 0x73, /* 55% */
	0x66, 0x99, 0x00, 0x00, 0xff, 0x00, 0x00, 0x99, 0x66, 0x00, 0xff, 0x66, 0x66, 0x99, 0x66, 0x66, 0xff, 0x00, 0x66, 0xff, 0x66, /* 60% */

	//Chartreuse Gre
	0xe5, 0x33, 0x00, 0x19, 0xff, 0x00, 0x19, 0x33, 0xcc, 0x19, 0xff, 0xcc, 0xe5, 0x33, 0xcc, 0xe5, 0xff, 0x00, 0xe5, 0xff, 0xcc, /* 20% */
	0xdf, 0x40, 0x00, 0x20, 0xff, 0x00, 0x20, 0x40, 0xbf, 0x20, 0xff, 0xbf, 0xdf, 0x40, 0xbf, 0xdf, 0xff, 0x00, 0xdf, 0xff, 0xbf, /* 25% */
	0xd8, 0x4d, 0x00, 0x26, 0xff, 0x00, 0x26, 0x4d, 0xb2, 0x26, 0xff, 0xb2, 0xd8, 0x4d, 0xb2, 0xd8, 0xff, 0x00, 0xd8, 0xff, 0xb2, /* 30% */
	0xd2, 0x59, 0x00, 0x2c, 0xff, 0x00, 0x2c, 0x59, 0xa6, 0x2c, 0xff, 0xa6, 0xd2, 0x59, 0xa6, 0xd2, 0xff, 0x00, 0xd2, 0xff, 0xa6, /* 35% */
	0xcc, 0x66, 0x00, 0x33, 0xff, 0x00, 0x33, 0x66, 0x99, 0x33, 0xff, 0x99, 0xcc, 0x66, 0x99, 0xcc, 0xff, 0x00, 0xcc, 0xff, 0x99, /* 40% */
	0xc5, 0x73, 0x00, 0x39, 0xff, 0x00, 0x39, 0x73, 0x8c, 0x39, 0xff, 0x8c, 0xc5, 0x73, 0x8c, 0xc5, 0xff, 0x00, 0xc5, 0xff, 0x8c, /* 45% */
	0xbf, 0x80, 0x00, 0x40, 0xff, 0x00, 0x40, 0x80, 0x7f, 0x40, 0xff, 0x7f, 0xbf, 0x80, 0x7f, 0xbf, 0xff, 0x00, 0xbf, 0xff, 0x7f, /* 50% */
	0xb9, 0x8c, 0x00, 0x46, 0xff, 0x00, 0x46, 0x8c, 0x73, 0x46, 0xff, 0x73, 0xb9, 0x8c, 0x73, 0xb9, 0xff, 0x00, 0xb9, 0xff, 0x73, /* 55% */
	0xb2, 0x99, 0x00, 0x4c, 0xff, 0x00, 0x4c, 0x99, 0x66, 0x4c, 0xff, 0x66, 0xb2, 0x99, 0x66, 0xb2, 0xff, 0x00, 0xb2, 0xff, 0x66, /* 60% */

	//Yellow
	0xff, 0x33, 0x00, 0x33, 0xff, 0x00, 0x33, 0x33, 0xcc, 0x33, 0xff, 0xcc, 0xff, 0x33, 0xcc, 0xff, 0xff, 0x00, 0xff, 0xff, 0xcc, /* 20% */
	0xff, 0x40, 0x00, 0x40, 0xff, 0x00, 0x40, 0x40, 0xbf, 0x40, 0xff, 0xbf, 0xff, 0x40, 0xbf, 0xff, 0xff, 0x00, 0xff, 0xff, 0xbf, /* 25% */
	0xff, 0x4d, 0x00, 0x4d, 0xff, 0x00, 0x4d, 0x4d, 0xb2, 0x4d, 0xff, 0xb2, 0xff, 0x4d, 0xb2, 0xff, 0xff, 0x00, 0xff, 0xff, 0xb2, /* 30% */
	0xff, 0x59, 0x00, 0x59, 0xff, 0x00, 0x59, 0x59, 0xa6, 0x59, 0xff, 0xa6, 0xff, 0x59, 0xa6, 0xff, 0xff, 0x00, 0xff, 0xff, 0xa6, /* 35% */
	0xff, 0x66, 0x00, 0x66, 0xff, 0x00, 0x66, 0x66, 0x99, 0x66, 0xff, 0x99, 0xff, 0x66, 0x99, 0xff, 0xff, 0x00, 0xff, 0xff, 0x99, /* 40% */
	0xff, 0x73, 0x00, 0x73, 0xff, 0x00, 0x73, 0x73, 0x8c, 0x73, 0xff, 0x8c, 0xff, 0x73, 0x8c, 0xff, 0xff, 0x00, 0xff, 0xff, 0x8c, /* 45% */
	0xff, 0x80, 0x00, 0x80, 0xff, 0x00, 0x80, 0x80, 0x7f, 0x80, 0xff, 0x7f, 0xff, 0x80, 0x7f, 0xff, 0xff, 0x00, 0xff, 0xff, 0x7f, /* 50% */
	0xff, 0x8c, 0x00, 0x8c, 0xff, 0x00, 0x8c, 0x8c, 0x73, 0x8c, 0xff, 0x73, 0xff, 0x8c, 0x73, 0xff, 0xff, 0x00, 0xff, 0xff, 0x73, /* 55% */
	0xff, 0x99, 0x00, 0x99, 0xff, 0x00, 0x99, 0x99, 0x66, 0x99, 0xff, 0x66, 0xff, 0x99, 0x66, 0xff, 0xff, 0x00, 0xff, 0xff, 0x66, /* 60% */

	//Orange
	0xff, 0x19, 0x00, 0x33, 0xe5, 0x00, 0x33, 0x19, 0xcc, 0x33, 0xe5, 0xcc, 0xff, 0x19, 0xcc, 0xff, 0xe5, 0x00, 0xff, 0xe5, 0xcc, /* 20% */
	0xff, 0x20, 0x00, 0x40, 0xdf, 0x00, 0x40, 0x20, 0xbf, 0x40, 0xdf, 0xbf, 0xff, 0x20, 0xbf, 0xff, 0xdf, 0x00, 0xff, 0xdf, 0xbf, /* 25% */
	0xff, 0x26, 0x00, 0x4d, 0xd8, 0x00, 0x4d, 0x26, 0xb2, 0x4d, 0xd8, 0xb2, 0xff, 0x26, 0xb2, 0xff, 0xd8, 0x00, 0xff, 0xd8, 0xb2, /* 30% */
	0xff, 0x2c, 0x00, 0x59, 0xd2, 0x00, 0x59, 0x2c, 0xa6, 0x59, 0xd2, 0xa6, 0xff, 0x2c, 0xa6, 0xff, 0xd2, 0x00, 0xff, 0xd2, 0xa6, /* 35% */
	0xff, 0x33, 0x00, 0x66, 0xcc, 0x00, 0x66, 0x33, 0x99, 0x66, 0xcc, 0x99, 0xff, 0x33, 0x99, 0xff, 0xcc, 0x00, 0xff, 0xcc, 0x99, /* 40% */
	0xff, 0x39, 0x00, 0x73, 0xc5, 0x00, 0x73, 0x39, 0x8c, 0x73, 0xc5, 0x8c, 0xff, 0x39, 0x8c, 0xff, 0xc5, 0x00, 0xff, 0xc5, 0x8c, /* 45% */
	0xff, 0x40, 0x00, 0x80, 0xbf, 0x00, 0x80, 0x40, 0x7f, 0x80, 0xbf, 0x7f, 0xff, 0x40, 0x7f, 0xff, 0xbf, 0x00, 0xff, 0xbf, 0x7f, /* 50% */
	0xff, 0x46, 0x00, 0x8c, 0xb9, 0x00, 0x8c, 0x46, 0x73, 0x8c, 0xb9, 0x73, 0xff, 0x46, 0x73, 0xff, 0xb9, 0x00, 0xff, 0xb9, 0x73, /* 55% */
	0xff, 0x4c, 0x00, 0x99, 0xb2, 0x00, 0x99, 0x4c, 0x66, 0x99, 0xb2, 0x66, 0xff, 0x4c, 0x66, 0xff, 0xb2, 0x00, 0xff, 0xb2, 0x66, /* 60% */

	//Red
	0xff, 0x00, 0x00, 0x33, 0xcc, 0x00, 0x33, 0x00, 0xcc, 0x33, 0xcc, 0xcc, 0xff, 0x00, 0xcc, 0xff, 0xcc, 0x00, 0xff, 0xcc, 0xcc, /* 20% */
	0xff, 0x00, 0x00, 0x40, 0xbf, 0x00, 0x40, 0x00, 0xbf, 0x40, 0xbf, 0xbf, 0xff, 0x00, 0xbf, 0xff, 0xbf, 0x00, 0xff, 0xbf, 0xbf, /* 25% */
	0xff, 0x00, 0x00, 0x4d, 0xb2, 0x00, 0x4d, 0x00, 0xb2, 0x4d, 0xb2, 0xb2, 0xff, 0x00, 0xb2, 0xff, 0xb2, 0x00, 0xff, 0xb2, 0xb2, /* 30% */
	0xff, 0x00, 0x00, 0x59, 0xa6, 0x00, 0x59, 0x00, 0xa6, 0x59, 0xa6, 0xa6, 0xff, 0x00, 0xa6, 0xff, 0xa6, 0x00, 0xff, 0xa6, 0xa6, /* 35% */
	0xff, 0x00, 0x00, 0x66, 0x99, 0x00, 0x66, 0x00, 0x99, 0x66, 0x99, 0x99, 0xff, 0x00, 0x99, 0xff, 0x99, 0x00, 0xff, 0x99, 0x99, /* 40% */
	0xff, 0x00, 0x00, 0x73, 0x8c, 0x00, 0x73, 0x00, 0x8c, 0x73, 0x8c, 0x8c, 0xff, 0x00, 0x8c, 0xff, 0x8c, 0x00, 0xff, 0x8c, 0x8c, /* 45% */
	0xff, 0x00, 0x00, 0x80, 0x7f, 0x00, 0x80, 0x00, 0x7f, 0x80, 0x7f, 0x7f, 0xff, 0x00, 0x7f, 0xff, 0x7f, 0x00, 0xff, 0x7f, 0x7f, /* 50% */
	0xff, 0x00, 0x00, 0x8c, 0x73, 0x00, 0x8c, 0x00, 0x73, 0x8c, 0x73, 0x73, 0xff, 0x00, 0x73, 0xff, 0x73, 0x00, 0xff, 0x73, 0x73, /* 55% */
	0xff, 0x00, 0x00, 0x99, 0x66, 0x00, 0x99, 0x00, 0x66, 0x99, 0x66, 0x66, 0xff, 0x00, 0x66, 0xff, 0x66, 0x00, 0xff, 0x66, 0x66, /* 60% */

	//Rose
	0xff, 0x00, 0x19, 0x33, 0xcc, 0x19, 0x33, 0x00, 0xe5, 0x33, 0xcc, 0xe5, 0xff, 0x00, 0xe5, 0xff, 0xcc, 0x19, 0xff, 0xcc, 0xe5, /* 20% */
	0xff, 0x00, 0x20, 0x40, 0xbf, 0x20, 0x40, 0x00, 0xdf, 0x40, 0xbf, 0xdf, 0xff, 0x00, 0xdf, 0xff, 0xbf, 0x20, 0xff, 0xbf, 0xdf, /* 25% */
	0xff, 0x00, 0x26, 0x4d, 0xb2, 0x26, 0x4d, 0x00, 0xd8, 0x4d, 0xb2, 0xd8, 0xff, 0x00, 0xd8, 0xff, 0xb2, 0x26, 0xff, 0xb2, 0xd8, /* 30% */
	0xff, 0x00, 0x2c, 0x59, 0xa6, 0x2c, 0x59, 0x00, 0xd2, 0x59, 0xa6, 0xd2, 0xff, 0x00, 0xd2, 0xff, 0xa6, 0x2c, 0xff, 0xa6, 0xd2, /* 35% */
	0xff, 0x00, 0x33, 0x66, 0x99, 0x33, 0x66, 0x00, 0xcc, 0x66, 0x99, 0xcc, 0xff, 0x00, 0xcc, 0xff, 0x99, 0x33, 0xff, 0x99, 0xcc, /* 40% */
	0xff, 0x00, 0x39, 0x73, 0x8c, 0x39, 0x73, 0x00, 0xc5, 0x73, 0x8c, 0xc5, 0xff, 0x00, 0xc5, 0xff, 0x8c, 0x39, 0xff, 0x8c, 0xc5, /* 45% */
	0xff, 0x00, 0x40, 0x80, 0x7f, 0x40, 0x80, 0x00, 0xbf, 0x80, 0x7f, 0xbf, 0xff, 0x00, 0xbf, 0xff, 0x7f, 0x40, 0xff, 0x7f, 0xbf, /* 50% */
	0xff, 0x00, 0x46, 0x8c, 0x73, 0x46, 0x8c, 0x00, 0xb9, 0x8c, 0x73, 0xb9, 0xff, 0x00, 0xb9, 0xff, 0x73, 0x46, 0xff, 0x73, 0xb9, /* 55% */
	0xff, 0x00, 0x4c, 0x99, 0x66, 0x4c, 0x99, 0x00, 0xb2, 0x99, 0x66, 0xb2, 0xff, 0x00, 0xb2, 0xff, 0x66, 0x4c, 0xff, 0x66, 0xb2, /* 60% */

	//Magenta
	0xff, 0x00, 0x33, 0x33, 0xcc, 0x33, 0x33, 0x00, 0xff, 0x33, 0xcc, 0xff, 0xff, 0x00, 0xff, 0xff, 0xcc, 0x33, 0xff, 0xcc, 0xff, /* 20% */
	0xff, 0x00, 0x40, 0x40, 0xbf, 0x40, 0x40, 0x00, 0xff, 0x40, 0xbf, 0xff, 0xff, 0x00, 0xff, 0xff, 0xbf, 0x40, 0xff, 0xbf, 0xff, /* 25% */
	0xff, 0x00, 0x4d, 0x4d, 0xb2, 0x4d, 0x4d, 0x00, 0xff, 0x4d, 0xb2, 0xff, 0xff, 0x00, 0xff, 0xff, 0xb2, 0x4d, 0xff, 0xb2, 0xff, /* 30% */
	0xff, 0x00, 0x59, 0x59, 0xa6, 0x59, 0x59, 0x00, 0xff, 0x59, 0xa6, 0xff, 0xff, 0x00, 0xff, 0xff, 0xa6, 0x59, 0xff, 0xa6, 0xff, /* 35% */
	0xff, 0x00, 0x66, 0x66, 0x99, 0x66, 0x66, 0x00, 0xff, 0x66, 0x99, 0xff, 0xff, 0x00, 0xff, 0xff, 0x99, 0x66, 0xff, 0x99, 0xff, /* 40% */
	0xff, 0x00, 0x73, 0x73, 0x8c, 0x73, 0x73, 0x00, 0xff, 0x73, 0x8c, 0xff, 0xff, 0x00, 0xff, 0xff, 0x8c, 0x73, 0xff, 0x8c, 0xff, /* 45% */
	0xff, 0x00, 0x80, 0x80, 0x7f, 0x80, 0x80, 0x00, 0xff, 0x80, 0x7f, 0xff, 0xff, 0x00, 0xff, 0xff, 0x7f, 0x80, 0xff, 0x7f, 0xff, /* 50% */
	0xff, 0x00, 0x8c, 0x8c, 0x73, 0x8c, 0x8c, 0x00, 0xff, 0x8c, 0x73, 0xff, 0xff, 0x00, 0xff, 0xff, 0x73, 0x8c, 0xff, 0x73, 0xff, /* 55% */
	0xff, 0x00, 0x99, 0x99, 0x66, 0x99, 0x99, 0x00, 0xff, 0x99, 0x66, 0xff, 0xff, 0x00, 0xff, 0xff, 0x66, 0x99, 0xff, 0x66, 0xff, /* 60% */

	//Violet
	0xe5, 0x00, 0x33, 0x19, 0xcc, 0x33, 0x19, 0x00, 0xff, 0x19, 0xcc, 0xff, 0xe5, 0x00, 0xff, 0xe5, 0xcc, 0x33, 0xe5, 0xcc, 0xff, /* 20% */
	0xdf, 0x00, 0x40, 0x20, 0xbf, 0x40, 0x20, 0x00, 0xff, 0x20, 0xbf, 0xff, 0xdf, 0x00, 0xff, 0xdf, 0xbf, 0x40, 0xdf, 0xbf, 0xff, /* 25% */
	0xd8, 0x00, 0x4d, 0x26, 0xb2, 0x4d, 0x26, 0x00, 0xff, 0x26, 0xb2, 0xff, 0xd8, 0x00, 0xff, 0xd8, 0xb2, 0x4d, 0xd8, 0xb2, 0xff, /* 30% */
	0xd2, 0x00, 0x59, 0x2c, 0xa6, 0x59, 0x2c, 0x00, 0xff, 0x2c, 0xa6, 0xff, 0xd2, 0x00, 0xff, 0xd2, 0xa6, 0x59, 0xd2, 0xa6, 0xff, /* 35% */
	0xcc, 0x00, 0x66, 0x33, 0x99, 0x66, 0x33, 0x00, 0xff, 0x33, 0x99, 0xff, 0xcc, 0x00, 0xff, 0xcc, 0x99, 0x66, 0xcc, 0x99, 0xff, /* 40% */
	0xc5, 0x00, 0x73, 0x39, 0x8c, 0x73, 0x39, 0x00, 0xff, 0x39, 0x8c, 0xff, 0xc5, 0x00, 0xff, 0xc5, 0x8c, 0x73, 0xc5, 0x8c, 0xff, /* 45% */
	0xbf, 0x00, 0x80, 0x40, 0x7f, 0x80, 0x40, 0x00, 0xff, 0x40, 0x7f, 0xff, 0xbf, 0x00, 0xff, 0xbf, 0x7f, 0x80, 0xbf, 0x7f, 0xff, /* 50% */
	0xb9, 0x00, 0x8c, 0x46, 0x73, 0x8c, 0x46, 0x00, 0xff, 0x46, 0x73, 0xff, 0xb9, 0x00, 0xff, 0xb9, 0x73, 0x8c, 0xb9, 0x73, 0xff, /* 55% */
	0xb2, 0x00, 0x99, 0x4c, 0x66, 0x99, 0x4c, 0x00, 0xff, 0x4c, 0x66, 0xff, 0xb2, 0x00, 0xff, 0xb2, 0x66, 0x99, 0xb2, 0x66, 0xff, /* 60% */
};

static unsigned char night_mode_data_auto[] = {
	0xff, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x00, 0x00, 0xee, 0x00, 0xf9, 0xee, 0xff, 0x00, 0xee, 0xff, 0xf9, 0x00, 0xff, 0xf9, 0xee, /* 6500K */
	0xff, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x00, 0x00, 0xe6, 0x00, 0xf7, 0xe6, 0xff, 0x00, 0xe6, 0xff, 0xf7, 0x00, 0xff, 0xf7, 0xe6, /* 6300K */
	0xff, 0x00, 0x00, 0x00, 0xf3, 0x00, 0x00, 0x00, 0xde, 0x00, 0xf3, 0xde, 0xff, 0x00, 0xde, 0xff, 0xf3, 0x00, 0xff, 0xf3, 0xde, /* 6100K */
	0xff, 0x00, 0x00, 0x00, 0xef, 0x00, 0x00, 0x00, 0xd6, 0x00, 0xef, 0xd6, 0xff, 0x00, 0xd6, 0xff, 0xef, 0x00, 0xff, 0xef, 0xd6, /* 5900K */
	0xff, 0x00, 0x00, 0x00, 0xec, 0x00, 0x00, 0x00, 0xcd, 0x00, 0xec, 0xcd, 0xff, 0x00, 0xcd, 0xff, 0xec, 0x00, 0xff, 0xec, 0xcd, /* 5700K */
	0xff, 0x00, 0x00, 0x00, 0xe8, 0x00, 0x00, 0x00, 0xc5, 0x00, 0xe8, 0xc5, 0xff, 0x00, 0xc5, 0xff, 0xe8, 0x00, 0xff, 0xe8, 0xc5, /* 5500K */
	0xff, 0x00, 0x00, 0x00, 0xdd, 0x00, 0x00, 0x00, 0xaa, 0x00, 0xdd, 0xaa, 0xff, 0x00, 0xaa, 0xff, 0xdd, 0x00, 0xff, 0xdd, 0xaa, /* 4900K */
	0xff, 0x00, 0x00, 0x00, 0xcd, 0x00, 0x00, 0x00, 0x87, 0x00, 0xcd, 0x87, 0xff, 0x00, 0x87, 0xff, 0xcd, 0x00, 0xff, 0xcd, 0x87, /* 4300K */
	0xff, 0x00, 0x00, 0x00, 0xb9, 0x00, 0x00, 0x00, 0x62, 0x00, 0xb9, 0x62, 0xff, 0x00, 0x62, 0xff, 0xb9, 0x00, 0xff, 0xb9, 0x62, /* 3700K */
	0xff, 0x00, 0x00, 0x00, 0xa4, 0x00, 0x00, 0x00, 0x42, 0x00, 0xa4, 0x42, 0xff, 0x00, 0x42, 0xff, 0xa4, 0x00, 0xff, 0xa4, 0x42, /* 3100K */
	0xff, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x78, 0x1a, 0xff, 0x00, 0x1a, 0xff, 0x78, 0x00, 0xff, 0x78, 0x1a, /* 2300K */
	0xff, 0x00, 0x00, 0x00, 0xf1, 0x00, 0x00, 0x00, 0xd8, 0x00, 0xf1, 0xd8, 0xff, 0x00, 0xd8, 0xff, 0xf1, 0x00, 0xff, 0xf1, 0xd8,
	0xff, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0xd6, 0x00, 0xf0, 0xd6, 0xff, 0x00, 0xd6, 0xff, 0xf0, 0x00, 0xff, 0xf0, 0xd6,
	0xff, 0x00, 0x00, 0x00, 0xef, 0x00, 0x00, 0x00, 0xd3, 0x00, 0xef, 0xd3, 0xff, 0x00, 0xd3, 0xff, 0xef, 0x00, 0xff, 0xef, 0xd3,
	0xff, 0x00, 0x00, 0x00, 0xee, 0x00, 0x00, 0x00, 0xd1, 0x00, 0xee, 0xd1, 0xff, 0x00, 0xd1, 0xff, 0xee, 0x00, 0xff, 0xee, 0xd1,
	0xff, 0x00, 0x00, 0x00, 0xec, 0x00, 0x00, 0x00, 0xce, 0x00, 0xec, 0xce, 0xff, 0x00, 0xce, 0xff, 0xec, 0x00, 0xff, 0xec, 0xce,
	0xff, 0x00, 0x00, 0x00, 0xeb, 0x00, 0x00, 0x00, 0xcc, 0x00, 0xeb, 0xcc, 0xff, 0x00, 0xcc, 0xff, 0xeb, 0x00, 0xff, 0xeb, 0xcc,
	0xff, 0x00, 0x00, 0x00, 0xea, 0x00, 0x00, 0x00, 0xc9, 0x00, 0xea, 0xc9, 0xff, 0x00, 0xc9, 0xff, 0xea, 0x00, 0xff, 0xea, 0xc9,
	0xff, 0x00, 0x00, 0x00, 0xe9, 0x00, 0x00, 0x00, 0xc7, 0x00, 0xe9, 0xc7, 0xff, 0x00, 0xc7, 0xff, 0xe9, 0x00, 0xff, 0xe9, 0xc7,
	0xff, 0x00, 0x00, 0x00, 0xe8, 0x00, 0x00, 0x00, 0xc5, 0x00, 0xe8, 0xc5, 0xff, 0x00, 0xc5, 0xff, 0xe8, 0x00, 0xff, 0xe8, 0xc5,
	0xff, 0x00, 0x00, 0x00, 0xe7, 0x00, 0x00, 0x00, 0xc2, 0x00, 0xe7, 0xc2, 0xff, 0x00, 0xc2, 0xff, 0xe7, 0x00, 0xff, 0xe7, 0xc2,
	0xff, 0x00, 0x00, 0x00, 0xe6, 0x00, 0x00, 0x00, 0xc0, 0x00, 0xe6, 0xc0, 0xff, 0x00, 0xc0, 0xff, 0xe6, 0x00, 0xff, 0xe6, 0xc0,
	0xff, 0x00, 0x00, 0x00, 0xe5, 0x00, 0x00, 0x00, 0xbd, 0x00, 0xe5, 0xbd, 0xff, 0x00, 0xbd, 0xff, 0xe5, 0x00, 0xff, 0xe5, 0xbd,
	0xff, 0x00, 0x00, 0x00, 0xe4, 0x00, 0x00, 0x00, 0xbb, 0x00, 0xe4, 0xbb, 0xff, 0x00, 0xbb, 0xff, 0xe4, 0x00, 0xff, 0xe4, 0xbb,
	0xff, 0x00, 0x00, 0x00, 0xe3, 0x00, 0x00, 0x00, 0xb8, 0x00, 0xe3, 0xb8, 0xff, 0x00, 0xb8, 0xff, 0xe3, 0x00, 0xff, 0xe3, 0xb8,
	0xff, 0x00, 0x00, 0x00, 0xe2, 0x00, 0x00, 0x00, 0xb6, 0x00, 0xe2, 0xb6, 0xff, 0x00, 0xb6, 0xff, 0xe2, 0x00, 0xff, 0xe2, 0xb6,
	0xff, 0x00, 0x00, 0x00, 0xe1, 0x00, 0x00, 0x00, 0xb3, 0x00, 0xe1, 0xb3, 0xff, 0x00, 0xb3, 0xff, 0xe1, 0x00, 0xff, 0xe1, 0xb3,
	0xff, 0x00, 0x00, 0x00, 0xdf, 0x00, 0x00, 0x00, 0xb1, 0x00, 0xdf, 0xb1, 0xff, 0x00, 0xb1, 0xff, 0xdf, 0x00, 0xff, 0xdf, 0xb1,
	0xff, 0x00, 0x00, 0x00, 0xde, 0x00, 0x00, 0x00, 0xae, 0x00, 0xde, 0xae, 0xff, 0x00, 0xae, 0xff, 0xde, 0x00, 0xff, 0xde, 0xae,
	0xff, 0x00, 0x00, 0x00, 0xdd, 0x00, 0x00, 0x00, 0xac, 0x00, 0xdd, 0xac, 0xff, 0x00, 0xac, 0xff, 0xdd, 0x00, 0xff, 0xdd, 0xac,
	0xff, 0x00, 0x00, 0x00, 0xdc, 0x00, 0x00, 0x00, 0xa9, 0x00, 0xdc, 0xa9, 0xff, 0x00, 0xa9, 0xff, 0xdc, 0x00, 0xff, 0xdc, 0xa9,
	0xff, 0x00, 0x00, 0x00, 0xda, 0x00, 0x00, 0x00, 0xa7, 0x00, 0xda, 0xa7, 0xff, 0x00, 0xa7, 0xff, 0xda, 0x00, 0xff, 0xda, 0xa7,
	0xff, 0x00, 0x00, 0x00, 0xd9, 0x00, 0x00, 0x00, 0xa4, 0x00, 0xd9, 0xa4, 0xff, 0x00, 0xa4, 0xff, 0xd9, 0x00, 0xff, 0xd9, 0xa4,
	0xff, 0x00, 0x00, 0x00, 0xd8, 0x00, 0x00, 0x00, 0xa1, 0x00, 0xd8, 0xa1, 0xff, 0x00, 0xa1, 0xff, 0xd8, 0x00, 0xff, 0xd8, 0xa1,
	0xff, 0x00, 0x00, 0x00, 0xd7, 0x00, 0x00, 0x00, 0x9e, 0x00, 0xd7, 0x9e, 0xff, 0x00, 0x9e, 0xff, 0xd7, 0x00, 0xff, 0xd7, 0x9e,
	0xff, 0x00, 0x00, 0x00, 0xd6, 0x00, 0x00, 0x00, 0x9b, 0x00, 0xd6, 0x9b, 0xff, 0x00, 0x9b, 0xff, 0xd6, 0x00, 0xff, 0xd6, 0x9b,
	0xff, 0x00, 0x00, 0x00, 0xd4, 0x00, 0x00, 0x00, 0x99, 0x00, 0xd4, 0x99, 0xff, 0x00, 0x99, 0xff, 0xd4, 0x00, 0xff, 0xd4, 0x99,
	0xff, 0x00, 0x00, 0x00, 0xd3, 0x00, 0x00, 0x00, 0x96, 0x00, 0xd3, 0x96, 0xff, 0x00, 0x96, 0xff, 0xd3, 0x00, 0xff, 0xd3, 0x96,
	0xff, 0x00, 0x00, 0x00, 0xd2, 0x00, 0x00, 0x00, 0x93, 0x00, 0xd2, 0x93, 0xff, 0x00, 0x93, 0xff, 0xd2, 0x00, 0xff, 0xd2, 0x93,
	0xff, 0x00, 0x00, 0x00, 0xd1, 0x00, 0x00, 0x00, 0x90, 0x00, 0xd1, 0x90, 0xff, 0x00, 0x90, 0xff, 0xd1, 0x00, 0xff, 0xd1, 0x90,
	0xff, 0x00, 0x00, 0x00, 0xcf, 0x00, 0x00, 0x00, 0x8d, 0x00, 0xcf, 0x8d, 0xff, 0x00, 0x8d, 0xff, 0xcf, 0x00, 0xff, 0xcf, 0x8d,
	0xff, 0x00, 0x00, 0x00, 0xce, 0x00, 0x00, 0x00, 0x8a, 0x00, 0xce, 0x8a, 0xff, 0x00, 0x8a, 0xff, 0xce, 0x00, 0xff, 0xce, 0x8a,
	0xff, 0x00, 0x00, 0x00, 0xcc, 0x00, 0x00, 0x00, 0x87, 0x00, 0xcc, 0x87, 0xff, 0x00, 0x87, 0xff, 0xcc, 0x00, 0xff, 0xcc, 0x87,
	0xff, 0x00, 0x00, 0x00, 0xcb, 0x00, 0x00, 0x00, 0x84, 0x00, 0xcb, 0x84, 0xff, 0x00, 0x84, 0xff, 0xcb, 0x00, 0xff, 0xcb, 0x84,
	0xff, 0x00, 0x00, 0x00, 0xc9, 0x00, 0x00, 0x00, 0x81, 0x00, 0xc9, 0x81, 0xff, 0x00, 0x81, 0xff, 0xc9, 0x00, 0xff, 0xc9, 0x81,
	0xff, 0x00, 0x00, 0x00, 0xc8, 0x00, 0x00, 0x00, 0x7e, 0x00, 0xc8, 0x7e, 0xff, 0x00, 0x7e, 0xff, 0xc8, 0x00, 0xff, 0xc8, 0x7e,
	0xff, 0x00, 0x00, 0x00, 0xc6, 0x00, 0x00, 0x00, 0x7b, 0x00, 0xc6, 0x7b, 0xff, 0x00, 0x7b, 0xff, 0xc6, 0x00, 0xff, 0xc6, 0x7b,
	0xff, 0x00, 0x00, 0x00, 0xc6, 0x00, 0x00, 0x00, 0x7b, 0x00, 0xc6, 0x7b, 0xff, 0x00, 0x7b, 0xff, 0xc6, 0x00, 0xff, 0xc6, 0x7b, /* 37 step */
	0xff, 0x00, 0x00, 0x00, 0xc6, 0x00, 0x00, 0x00, 0x7b, 0x00, 0xc6, 0x7b, 0xff, 0x00, 0x7b, 0xff, 0xc6, 0x00, 0xff, 0xc6, 0x7b,
	0xff, 0x00, 0x00, 0x00, 0xc6, 0x00, 0x00, 0x00, 0x7b, 0x00, 0xc6, 0x7b, 0xff, 0x00, 0x7b, 0xff, 0xc6, 0x00, 0xff, 0xc6, 0x7b,
	0xff, 0x00, 0x00, 0x00, 0xc6, 0x00, 0x00, 0x00, 0x7b, 0x00, 0xc6, 0x7b, 0xff, 0x00, 0x7b, 0xff, 0xc6, 0x00, 0xff, 0xc6, 0x7b,
	0xff, 0x00, 0x00, 0x00, 0xc6, 0x00, 0x00, 0x00, 0x7b, 0x00, 0xc6, 0x7b, 0xff, 0x00, 0x7b, 0xff, 0xc6, 0x00, 0xff, 0xc6, 0x7b,
	0xff, 0x00, 0x00, 0x00, 0xc6, 0x00, 0x00, 0x00, 0x7b, 0x00, 0xc6, 0x7b, 0xff, 0x00, 0x7b, 0xff, 0xc6, 0x00, 0xff, 0xc6, 0x7b,
	0xff, 0x00, 0x00, 0x00, 0xc6, 0x00, 0x00, 0x00, 0x7b, 0x00, 0xc6, 0x7b, 0xff, 0x00, 0x7b, 0xff, 0xc6, 0x00, 0xff, 0xc6, 0x7b,
	0xff, 0x00, 0x00, 0x00, 0xc6, 0x00, 0x00, 0x00, 0x7b, 0x00, 0xc6, 0x7b, 0xff, 0x00, 0x7b, 0xff, 0xc6, 0x00, 0xff, 0xc6, 0x7b,
	0xff, 0x00, 0x00, 0x00, 0xc6, 0x00, 0x00, 0x00, 0x7b, 0x00, 0xc6, 0x7b, 0xff, 0x00, 0x7b, 0xff, 0xc6, 0x00, 0xff, 0xc6, 0x7b,
	0xff, 0x00, 0x00, 0x00, 0xc6, 0x00, 0x00, 0x00, 0x7b, 0x00, 0xc6, 0x7b, 0xff, 0x00, 0x7b, 0xff, 0xc6, 0x00, 0xff, 0xc6, 0x7b,
	0xff, 0x00, 0x00, 0x00, 0xc6, 0x00, 0x00, 0x00, 0x7b, 0x00, 0xc6, 0x7b, 0xff, 0x00, 0x7b, 0xff, 0xc6, 0x00, 0xff, 0xc6, 0x7b,
	0xff, 0x00, 0x00, 0x00, 0xc6, 0x00, 0x00, 0x00, 0x7b, 0x00, 0xc6, 0x7b, 0xff, 0x00, 0x7b, 0xff, 0xc6, 0x00, 0xff, 0xc6, 0x7b,
	0xff, 0x00, 0x00, 0x00, 0xc6, 0x00, 0x00, 0x00, 0x7b, 0x00, 0xc6, 0x7b, 0xff, 0x00, 0x7b, 0xff, 0xc6, 0x00, 0xff, 0xc6, 0x7b,
	0xff, 0x00, 0x00, 0x00, 0xc6, 0x00, 0x00, 0x00, 0x7b, 0x00, 0xc6, 0x7b, 0xff, 0x00, 0x7b, 0xff, 0xc6, 0x00, 0xff, 0xc6, 0x7b,
	0xff, 0x00, 0x00, 0x00, 0xc6, 0x00, 0x00, 0x00, 0x7b, 0x00, 0xc6, 0x7b, 0xff, 0x00, 0x7b, 0xff, 0xc6, 0x00, 0xff, 0xc6, 0x7b,
	0xff, 0x00, 0x00, 0x00, 0xc6, 0x00, 0x00, 0x00, 0x7b, 0x00, 0xc6, 0x7b, 0xff, 0x00, 0x7b, 0xff, 0xc6, 0x00, 0xff, 0xc6, 0x7b,
	0xff, 0x00, 0x00, 0x00, 0xc6, 0x00, 0x00, 0x00, 0x7b, 0x00, 0xc6, 0x7b, 0xff, 0x00, 0x7b, 0xff, 0xc6, 0x00, 0xff, 0xc6, 0x7b,
	0xff, 0x00, 0x00, 0x00, 0xc6, 0x00, 0x00, 0x00, 0x7b, 0x00, 0xc6, 0x7b, 0xff, 0x00, 0x7b, 0xff, 0xc6, 0x00, 0xff, 0xc6, 0x7b,
	0xff, 0x00, 0x00, 0x00, 0xc6, 0x00, 0x00, 0x00, 0x7b, 0x00, 0xc6, 0x7b, 0xff, 0x00, 0x7b, 0xff, 0xc6, 0x00, 0xff, 0xc6, 0x7b,
	0xff, 0x00, 0x00, 0x00, 0xc6, 0x00, 0x00, 0x00, 0x7b, 0x00, 0xc6, 0x7b, 0xff, 0x00, 0x7b, 0xff, 0xc6, 0x00, 0xff, 0xc6, 0x7b,
	0xff, 0x00, 0x00, 0x00, 0xc6, 0x00, 0x00, 0x00, 0x7b, 0x00, 0xc6, 0x7b, 0xff, 0x00, 0x7b, 0xff, 0xc6, 0x00, 0xff, 0xc6, 0x7b,
	0xff, 0x00, 0x00, 0x00, 0xc6, 0x00, 0x00, 0x00, 0x7b, 0x00, 0xc6, 0x7b, 0xff, 0x00, 0x7b, 0xff, 0xc6, 0x00, 0xff, 0xc6, 0x7b,
	0xff, 0x00, 0x00, 0x00, 0xc6, 0x00, 0x00, 0x00, 0x7b, 0x00, 0xc6, 0x7b, 0xff, 0x00, 0x7b, 0xff, 0xc6, 0x00, 0xff, 0xc6, 0x7b,
	0xff, 0x00, 0x00, 0x00, 0xc6, 0x00, 0x00, 0x00, 0x7b, 0x00, 0xc6, 0x7b, 0xff, 0x00, 0x7b, 0xff, 0xc6, 0x00, 0xff, 0xc6, 0x7b,
	0xff, 0x00, 0x00, 0x00, 0xc6, 0x00, 0x00, 0x00, 0x7b, 0x00, 0xc6, 0x7b, 0xff, 0x00, 0x7b, 0xff, 0xc6, 0x00, 0xff, 0xc6, 0x7b,
	0xff, 0x00, 0x00, 0x00, 0xc6, 0x00, 0x00, 0x00, 0x7b, 0x00, 0xc6, 0x7b, 0xff, 0x00, 0x7b, 0xff, 0xc6, 0x00, 0xff, 0xc6, 0x7b,
	0xff, 0x00, 0x00, 0x00, 0xc6, 0x00, 0x00, 0x00, 0x7b, 0x00, 0xc6, 0x7b, 0xff, 0x00, 0x7b, 0xff, 0xc6, 0x00, 0xff, 0xc6, 0x7b,
	0xff, 0x00, 0x00, 0x00, 0xc6, 0x00, 0x00, 0x00, 0x7b, 0x00, 0xc6, 0x7b, 0xff, 0x00, 0x7b, 0xff, 0xc6, 0x00, 0xff, 0xc6, 0x7b,
	0xff, 0x00, 0x00, 0x00, 0xc6, 0x00, 0x00, 0x00, 0x7b, 0x00, 0xc6, 0x7b, 0xff, 0x00, 0x7b, 0xff, 0xc6, 0x00, 0xff, 0xc6, 0x7b,
	0xff, 0x00, 0x00, 0x00, 0xc6, 0x00, 0x00, 0x00, 0x7b, 0x00, 0xc6, 0x7b, 0xff, 0x00, 0x7b, 0xff, 0xc6, 0x00, 0xff, 0xc6, 0x7b,
	0xff, 0x00, 0x00, 0x00, 0xc6, 0x00, 0x00, 0x00, 0x7b, 0x00, 0xc6, 0x7b, 0xff, 0x00, 0x7b, 0xff, 0xc6, 0x00, 0xff, 0xc6, 0x7b,
	0xff, 0x00, 0x00, 0x00, 0xc6, 0x00, 0x00, 0x00, 0x7b, 0x00, 0xc6, 0x7b, 0xff, 0x00, 0x7b, 0xff, 0xc6, 0x00, 0xff, 0xc6, 0x7b,
	0xff, 0x00, 0x00, 0x00, 0xc6, 0x00, 0x00, 0x00, 0x7b, 0x00, 0xc6, 0x7b, 0xff, 0x00, 0x7b, 0xff, 0xc6, 0x00, 0xff, 0xc6, 0x7b,
	0xff, 0x00, 0x00, 0x00, 0xc6, 0x00, 0x00, 0x00, 0x7b, 0x00, 0xc6, 0x7b, 0xff, 0x00, 0x7b, 0xff, 0xc6, 0x00, 0xff, 0xc6, 0x7b,
	0xff, 0x00, 0x00, 0x00, 0xc6, 0x00, 0x00, 0x00, 0x7b, 0x00, 0xc6, 0x7b, 0xff, 0x00, 0x7b, 0xff, 0xc6, 0x00, 0xff, 0xc6, 0x7b,
	0xff, 0x00, 0x00, 0x00, 0xc6, 0x00, 0x00, 0x00, 0x7b, 0x00, 0xc6, 0x7b, 0xff, 0x00, 0x7b, 0xff, 0xc6, 0x00, 0xff, 0xc6, 0x7b,
	0xff, 0x00, 0x00, 0x00, 0xc6, 0x00, 0x00, 0x00, 0x7b, 0x00, 0xc6, 0x7b, 0xff, 0x00, 0x7b, 0xff, 0xc6, 0x00, 0xff, 0xc6, 0x7b,
	0xff, 0x00, 0x00, 0x00, 0xc6, 0x00, 0x00, 0x00, 0x7b, 0x00, 0xc6, 0x7b, 0xff, 0x00, 0x7b, 0xff, 0xc6, 0x00, 0xff, 0xc6, 0x7b,
	0xff, 0x00, 0x00, 0x00, 0xc6, 0x00, 0x00, 0x00, 0x7b, 0x00, 0xc6, 0x7b, 0xff, 0x00, 0x7b, 0xff, 0xc6, 0x00, 0xff, 0xc6, 0x7b,
	0xff, 0x00, 0x00, 0x00, 0xc6, 0x00, 0x00, 0x00, 0x7b, 0x00, 0xc6, 0x7b, 0xff, 0x00, 0x7b, 0xff, 0xc6, 0x00, 0xff, 0xc6, 0x7b,
	0xff, 0x00, 0x00, 0x00, 0xc6, 0x00, 0x00, 0x00, 0x7b, 0x00, 0xc6, 0x7b, 0xff, 0x00, 0x7b, 0xff, 0xc6, 0x00, 0xff, 0xc6, 0x7b,
	0xff, 0x00, 0x00, 0x00, 0xc6, 0x00, 0x00, 0x00, 0x7b, 0x00, 0xc6, 0x7b, 0xff, 0x00, 0x7b, 0xff, 0xc6, 0x00, 0xff, 0xc6, 0x7b,
	0xff, 0x00, 0x00, 0x00, 0xc6, 0x00, 0x00, 0x00, 0x7b, 0x00, 0xc6, 0x7b, 0xff, 0x00, 0x7b, 0xff, 0xc6, 0x00, 0xff, 0xc6, 0x7b,
	0xff, 0x00, 0x00, 0x00, 0xc6, 0x00, 0x00, 0x00, 0x7b, 0x00, 0xc6, 0x7b, 0xff, 0x00, 0x7b, 0xff, 0xc6, 0x00, 0xff, 0xc6, 0x7b,
	0xff, 0x00, 0x00, 0x00, 0xc6, 0x00, 0x00, 0x00, 0x7b, 0x00, 0xc6, 0x7b, 0xff, 0x00, 0x7b, 0xff, 0xc6, 0x00, 0xff, 0xc6, 0x7b,
	0xff, 0x00, 0x00, 0x00, 0xc6, 0x00, 0x00, 0x00, 0x7b, 0x00, 0xc6, 0x7b, 0xff, 0x00, 0x7b, 0xff, 0xc6, 0x00, 0xff, 0xc6, 0x7b,
	0xff, 0x00, 0x00, 0x00, 0xc6, 0x00, 0x00, 0x00, 0x7b, 0x00, 0xc6, 0x7b, 0xff, 0x00, 0x7b, 0xff, 0xc6, 0x00, 0xff, 0xc6, 0x7b,
	0xff, 0x00, 0x00, 0x00, 0xc6, 0x00, 0x00, 0x00, 0x7b, 0x00, 0xc6, 0x7b, 0xff, 0x00, 0x7b, 0xff, 0xc6, 0x00, 0xff, 0xc6, 0x7b,
	0xff, 0x00, 0x00, 0x00, 0xc6, 0x00, 0x00, 0x00, 0x7b, 0x00, 0xc6, 0x7b, 0xff, 0x00, 0x7b, 0xff, 0xc6, 0x00, 0xff, 0xc6, 0x7b,
	0xff, 0x00, 0x00, 0x00, 0xc6, 0x00, 0x00, 0x00, 0x7b, 0x00, 0xc6, 0x7b, 0xff, 0x00, 0x7b, 0xff, 0xc6, 0x00, 0xff, 0xc6, 0x7b,
	0xff, 0x00, 0x00, 0x00, 0xc6, 0x00, 0x00, 0x00, 0x7b, 0x00, 0xc6, 0x7b, 0xff, 0x00, 0x7b, 0xff, 0xc6, 0x00, 0xff, 0xc6, 0x7b,
	0xff, 0x00, 0x00, 0x00, 0xc6, 0x00, 0x00, 0x00, 0x7b, 0x00, 0xc6, 0x7b, 0xff, 0x00, 0x7b, 0xff, 0xc6, 0x00, 0xff, 0xc6, 0x7b,
	0xff, 0x00, 0x00, 0x00, 0xc6, 0x00, 0x00, 0x00, 0x7b, 0x00, 0xc6, 0x7b, 0xff, 0x00, 0x7b, 0xff, 0xc6, 0x00, 0xff, 0xc6, 0x7b,
	0xff, 0x00, 0x00, 0x00, 0xc6, 0x00, 0x00, 0x00, 0x7b, 0x00, 0xc6, 0x7b, 0xff, 0x00, 0x7b, 0xff, 0xc6, 0x00, 0xff, 0xc6, 0x7b,
	0xff, 0x00, 0x00, 0x00, 0xc6, 0x00, 0x00, 0x00, 0x7b, 0x00, 0xc6, 0x7b, 0xff, 0x00, 0x7b, 0xff, 0xc6, 0x00, 0xff, 0xc6, 0x7b,
};

static unsigned char night_mode_data_natural[] = {
	0xad, 0x05, 0x05, 0x3c, 0xee, 0x14, 0x06, 0x08, 0xbc, 0x44, 0xea, 0xda, 0xbf, 0x0c, 0xc8, 0xe8, 0xde, 0x1a, 0xff, 0xf9, 0xee, /* 6500K */
	0xad, 0x05, 0x05, 0x3c, 0xee, 0x13, 0x06, 0x08, 0xb6, 0x44, 0xe9, 0xd3, 0xbf, 0x0c, 0xc2, 0xe8, 0xdc, 0x19, 0xff, 0xf7, 0xe6, /* 6300K */
	0xad, 0x04, 0x04, 0x3c, 0xee, 0x13, 0x06, 0x08, 0xb0, 0x44, 0xe5, 0xcc, 0xbf, 0x0c, 0xbc, 0xe8, 0xd9, 0x19, 0xff, 0xf3, 0xde, /* 6100K */
	0xad, 0x04, 0x04, 0x3c, 0xee, 0x12, 0x06, 0x08, 0xaa, 0x44, 0xe1, 0xc5, 0xbf, 0x0c, 0xb5, 0xe8, 0xd5, 0x18, 0xff, 0xef, 0xd6, /* 5900K */
	0xad, 0x04, 0x04, 0x3c, 0xeb, 0x11, 0x06, 0x07, 0xa3, 0x44, 0xdf, 0xbd, 0xbf, 0x0b, 0xae, 0xe8, 0xd3, 0x17, 0xff, 0xec, 0xcd, /* 5700K */
	0xad, 0x04, 0x04, 0x3c, 0xe7, 0x11, 0x06, 0x07, 0x9d, 0x44, 0xdb, 0xb7, 0xbf, 0x0b, 0xa8, 0xe8, 0xcf, 0x16, 0xff, 0xe8, 0xc5, /* 5500K */
	0xad, 0x04, 0x04, 0x3c, 0xdc, 0x0f, 0x06, 0x07, 0x89, 0x44, 0xd1, 0x9f, 0xbf, 0x0b, 0x92, 0xe8, 0xc6, 0x13, 0xff, 0xdd, 0xaa, /* 4900K */
	0xad, 0x03, 0x03, 0x3c, 0xcc, 0x0d, 0x06, 0x07, 0x6f, 0x44, 0xc2, 0x81, 0xbf, 0x0b, 0x76, 0xe8, 0xb8, 0x10, 0xff, 0xcd, 0x87, /* 4300K */
	0xad, 0x03, 0x03, 0x3c, 0xb8, 0x0a, 0x06, 0x06, 0x53, 0x44, 0xb0, 0x60, 0xbf, 0x0a, 0x59, 0xe8, 0xa6, 0x0c, 0xff, 0xb9, 0x62, /* 3700K */
	0xad, 0x02, 0x02, 0x3c, 0xa3, 0x08, 0x06, 0x06, 0x3b, 0x44, 0x9c, 0x44, 0xbf, 0x0a, 0x40, 0xe8, 0x94, 0x09, 0xff, 0xa4, 0x42, /* 3100K */
	0xad, 0x02, 0x02, 0x3c, 0x78, 0x05, 0x06, 0x06, 0x1d, 0x44, 0x74, 0x22, 0xbf, 0x08, 0x20, 0xe8, 0x6e, 0x05, 0xff, 0x78, 0x1a, /* 2300K */
	0xad, 0x04, 0x04, 0x30, 0xe0, 0x10, 0x06, 0x08, 0x9f, 0x44, 0xdd, 0xb8, 0xbf, 0x0b, 0xa9, 0xe8, 0xd1, 0x16, 0xff, 0xf1, 0xd8,
	0xad, 0x04, 0x04, 0x3c, 0xe0, 0x10, 0x06, 0x08, 0x9d, 0x44, 0xdc, 0xb6, 0xbf, 0x0b, 0xa7, 0xe8, 0xd0, 0x15, 0xff, 0xf0, 0xd6,
	0xad, 0x04, 0x04, 0x3c, 0xdf, 0x10, 0x06, 0x08, 0x9b, 0x44, 0xdb, 0xb4, 0xbf, 0x0b, 0xa5, 0xe8, 0xd0, 0x15, 0xff, 0xef, 0xd3,
	0xad, 0x04, 0x04, 0x3c, 0xde, 0x10, 0x06, 0x08, 0x9a, 0x44, 0xda, 0xb2, 0xbf, 0x0b, 0xa3, 0xe8, 0xcf, 0x15, 0xff, 0xee, 0xd1,
	0xad, 0x04, 0x04, 0x3c, 0xdc, 0x10, 0x06, 0x08, 0x97, 0x44, 0xd8, 0xb0, 0xbf, 0x0b, 0xa1, 0xe8, 0xcd, 0x15, 0xff, 0xec, 0xce,
	0xad, 0x04, 0x03, 0x3c, 0xdb, 0x10, 0x06, 0x08, 0x96, 0x44, 0xd7, 0xae, 0xbf, 0x0b, 0xa0, 0xe8, 0xcc, 0x14, 0xff, 0xeb, 0xcc,
	0xad, 0x04, 0x03, 0x3c, 0xda, 0x0f, 0x06, 0x08, 0x94, 0x44, 0xd6, 0xab, 0xbf, 0x0b, 0x9d, 0xe8, 0xcb, 0x14, 0xff, 0xea, 0xc9,
	0xad, 0x04, 0x03, 0x3c, 0xd9, 0x0f, 0x06, 0x08, 0x92, 0x44, 0xd5, 0xaa, 0xbf, 0x0a, 0x9c, 0xe8, 0xca, 0x14, 0xff, 0xe9, 0xc7,
	0xad, 0x04, 0x03, 0x3c, 0xd8, 0x0f, 0x06, 0x08, 0x91, 0x44, 0xd4, 0xa8, 0xbf, 0x0a, 0x9a, 0xe8, 0xc9, 0x14, 0xff, 0xe8, 0xc5,
	0xad, 0x04, 0x03, 0x3c, 0xd7, 0x0f, 0x06, 0x08, 0x8f, 0x44, 0xd3, 0xa5, 0xbf, 0x0a, 0x98, 0xe8, 0xc9, 0x13, 0xff, 0xe7, 0xc2,
	0xad, 0x04, 0x03, 0x3c, 0xd6, 0x0f, 0x06, 0x08, 0x8d, 0x44, 0xd3, 0xa4, 0xbf, 0x0a, 0x96, 0xe8, 0xc8, 0x13, 0xff, 0xe6, 0xc0,
	0xad, 0x04, 0x03, 0x3c, 0xd5, 0x0e, 0x06, 0x08, 0x8b, 0x44, 0xd2, 0xa1, 0xbf, 0x0a, 0x94, 0xe8, 0xc7, 0x13, 0xff, 0xe5, 0xbd,
	0xad, 0x04, 0x03, 0x3c, 0xd4, 0x0e, 0x06, 0x08, 0x89, 0x44, 0xd1, 0x9f, 0xbf, 0x0a, 0x92, 0xe8, 0xc6, 0x13, 0xff, 0xe4, 0xbb,
	0xad, 0x04, 0x03, 0x3c, 0xd3, 0x0e, 0x06, 0x08, 0x87, 0x44, 0xd0, 0x9d, 0xbf, 0x0a, 0x90, 0xe8, 0xc5, 0x12, 0xff, 0xe3, 0xb8,
	0xad, 0x04, 0x03, 0x3c, 0xd2, 0x0e, 0x06, 0x07, 0x86, 0x44, 0xcf, 0x9b, 0xbf, 0x0a, 0x8e, 0xe8, 0xc4, 0x12, 0xff, 0xe2, 0xb6,
	0xad, 0x04, 0x03, 0x3c, 0xd2, 0x0e, 0x06, 0x07, 0x83, 0x44, 0xce, 0x99, 0xbf, 0x0a, 0x8c, 0xe8, 0xc3, 0x12, 0xff, 0xe1, 0xb3,
	0xad, 0x04, 0x03, 0x3c, 0xd0, 0x0d, 0x06, 0x07, 0x82, 0x44, 0xcc, 0x97, 0xbf, 0x0a, 0x8a, 0xe8, 0xc2, 0x12, 0xff, 0xdf, 0xb1,
	0xad, 0x04, 0x03, 0x3c, 0xcf, 0x0d, 0x06, 0x07, 0x80, 0x44, 0xcb, 0x94, 0xbf, 0x0a, 0x88, 0xe8, 0xc1, 0x11, 0xff, 0xde, 0xae,
	0xad, 0x04, 0x03, 0x3c, 0xce, 0x0d, 0x06, 0x07, 0x7e, 0x44, 0xca, 0x93, 0xbf, 0x0a, 0x86, 0xe8, 0xc0, 0x11, 0xff, 0xdd, 0xac,
	0xad, 0x04, 0x03, 0x3c, 0xcd, 0x0d, 0x06, 0x07, 0x7c, 0x44, 0xc9, 0x90, 0xbf, 0x0a, 0x84, 0xe8, 0xbf, 0x11, 0xff, 0xdc, 0xa9,
	0xad, 0x04, 0x03, 0x3c, 0xcb, 0x0d, 0x06, 0x07, 0x7b, 0x44, 0xc8, 0x8e, 0xbf, 0x0a, 0x82, 0xe8, 0xbd, 0x11, 0xff, 0xda, 0xa7,
	0xad, 0x04, 0x03, 0x3c, 0xca, 0x0c, 0x06, 0x07, 0x78, 0x44, 0xc7, 0x8c, 0xbf, 0x0a, 0x80, 0xe8, 0xbc, 0x10, 0xff, 0xd9, 0xa4,
	0xad, 0x04, 0x03, 0x3c, 0xc9, 0x0c, 0x06, 0x07, 0x76, 0x44, 0xc6, 0x89, 0xbf, 0x0a, 0x7e, 0xe8, 0xbc, 0x10, 0xff, 0xd8, 0xa1,
	0xad, 0x04, 0x03, 0x3c, 0xc8, 0x0c, 0x06, 0x07, 0x74, 0x44, 0xc5, 0x87, 0xbf, 0x0a, 0x7b, 0xe8, 0xbb, 0x10, 0xff, 0xd7, 0x9e,
	0xad, 0x04, 0x03, 0x3c, 0xc7, 0x0c, 0x06, 0x07, 0x72, 0x44, 0xc4, 0x84, 0xbf, 0x09, 0x79, 0xe8, 0xba, 0x0f, 0xff, 0xd6, 0x9b,
	0xad, 0x04, 0x03, 0x3c, 0xc5, 0x0c, 0x06, 0x07, 0x70, 0x44, 0xc2, 0x82, 0xbf, 0x09, 0x78, 0xe8, 0xb8, 0x0f, 0xff, 0xd4, 0x99,
	0xad, 0x04, 0x02, 0x3c, 0xc4, 0x0b, 0x06, 0x07, 0x6e, 0x44, 0xc1, 0x80, 0xbf, 0x09, 0x75, 0xe8, 0xb7, 0x0f, 0xff, 0xd3, 0x96,
	0xad, 0x04, 0x02, 0x3c, 0xc4, 0x0b, 0x06, 0x07, 0x6c, 0x44, 0xc0, 0x7d, 0xbf, 0x09, 0x73, 0xe8, 0xb6, 0x0e, 0xff, 0xd2, 0x93,
	0xad, 0x04, 0x02, 0x3c, 0xc3, 0x0b, 0x06, 0x07, 0x6a, 0x44, 0xbf, 0x7b, 0xbf, 0x09, 0x70, 0xe8, 0xb5, 0x0e, 0xff, 0xd1, 0x90,
	0xad, 0x04, 0x02, 0x3c, 0xc1, 0x0b, 0x06, 0x07, 0x67, 0x44, 0xbd, 0x78, 0xbf, 0x09, 0x6e, 0xe8, 0xb4, 0x0e, 0xff, 0xcf, 0x8d,
	0xad, 0x04, 0x02, 0x3c, 0xc0, 0x0a, 0x06, 0x07, 0x65, 0x44, 0xbd, 0x75, 0xbf, 0x09, 0x6c, 0xe8, 0xb3, 0x0e, 0xff, 0xce, 0x8a,
	0xad, 0x04, 0x02, 0x3c, 0xbe, 0x0a, 0x06, 0x07, 0x63, 0x44, 0xbb, 0x73, 0xbf, 0x09, 0x69, 0xe8, 0xb1, 0x0d, 0xff, 0xcc, 0x87,
	0xad, 0x03, 0x02, 0x3c, 0xbd, 0x0a, 0x06, 0x07, 0x61, 0x44, 0xba, 0x70, 0xbf, 0x09, 0x67, 0xe8, 0xb0, 0x0d, 0xff, 0xcb, 0x84,
	0xad, 0x03, 0x02, 0x3c, 0xbb, 0x0a, 0x06, 0x07, 0x5f, 0x44, 0xb8, 0x6e, 0xbf, 0x09, 0x65, 0xe8, 0xae, 0x0d, 0xff, 0xc9, 0x81,
	0xad, 0x03, 0x02, 0x3c, 0xba, 0x09, 0x06, 0x07, 0x5c, 0x44, 0xb7, 0x6b, 0xbf, 0x09, 0x62, 0xe8, 0xae, 0x0c, 0xff, 0xc8, 0x7e,
	0xad, 0x03, 0x02, 0x3c, 0xb8, 0x09, 0x06, 0x06, 0x5a, 0x44, 0xb5, 0x69, 0xbf, 0x09, 0x60, 0xe8, 0xac, 0x0c, 0xff, 0xc6, 0x7b,
	0xad, 0x03, 0x02, 0x3c, 0xb8, 0x09, 0x06, 0x06, 0x5a, 0x44, 0xb5, 0x69, 0xbf, 0x09, 0x60, 0xe8, 0xac, 0x0c, 0xff, 0xc6, 0x7b, /* 37 step */
	0xad, 0x03, 0x02, 0x3c, 0xb8, 0x09, 0x06, 0x06, 0x5a, 0x44, 0xb5, 0x69, 0xbf, 0x09, 0x60, 0xe8, 0xac, 0x0c, 0xff, 0xc6, 0x7b,
	0xad, 0x03, 0x02, 0x3c, 0xb8, 0x09, 0x06, 0x06, 0x5a, 0x44, 0xb5, 0x69, 0xbf, 0x09, 0x60, 0xe8, 0xac, 0x0c, 0xff, 0xc6, 0x7b,
	0xad, 0x03, 0x02, 0x3c, 0xb8, 0x09, 0x06, 0x06, 0x5a, 0x44, 0xb5, 0x69, 0xbf, 0x09, 0x60, 0xe8, 0xac, 0x0c, 0xff, 0xc6, 0x7b,
	0xad, 0x03, 0x02, 0x3c, 0xb8, 0x09, 0x06, 0x06, 0x5a, 0x44, 0xb5, 0x69, 0xbf, 0x09, 0x60, 0xe8, 0xac, 0x0c, 0xff, 0xc6, 0x7b,
	0xad, 0x03, 0x02, 0x3c, 0xb8, 0x09, 0x06, 0x06, 0x5a, 0x44, 0xb5, 0x69, 0xbf, 0x09, 0x60, 0xe8, 0xac, 0x0c, 0xff, 0xc6, 0x7b,
	0xad, 0x03, 0x02, 0x3c, 0xb8, 0x09, 0x06, 0x06, 0x5a, 0x44, 0xb5, 0x69, 0xbf, 0x09, 0x60, 0xe8, 0xac, 0x0c, 0xff, 0xc6, 0x7b,
	0xad, 0x03, 0x02, 0x3c, 0xb8, 0x09, 0x06, 0x06, 0x5a, 0x44, 0xb5, 0x69, 0xbf, 0x09, 0x60, 0xe8, 0xac, 0x0c, 0xff, 0xc6, 0x7b,
	0xad, 0x03, 0x02, 0x3c, 0xb8, 0x09, 0x06, 0x06, 0x5a, 0x44, 0xb5, 0x69, 0xbf, 0x09, 0x60, 0xe8, 0xac, 0x0c, 0xff, 0xc6, 0x7b,
	0xad, 0x03, 0x02, 0x3c, 0xb8, 0x09, 0x06, 0x06, 0x5a, 0x44, 0xb5, 0x69, 0xbf, 0x09, 0x60, 0xe8, 0xac, 0x0c, 0xff, 0xc6, 0x7b,
	0xad, 0x03, 0x02, 0x3c, 0xb8, 0x09, 0x06, 0x06, 0x5a, 0x44, 0xb5, 0x69, 0xbf, 0x09, 0x60, 0xe8, 0xac, 0x0c, 0xff, 0xc6, 0x7b,
	0xad, 0x03, 0x02, 0x3c, 0xb8, 0x09, 0x06, 0x06, 0x5a, 0x44, 0xb5, 0x69, 0xbf, 0x09, 0x60, 0xe8, 0xac, 0x0c, 0xff, 0xc6, 0x7b,
	0xad, 0x03, 0x02, 0x3c, 0xb8, 0x09, 0x06, 0x06, 0x5a, 0x44, 0xb5, 0x69, 0xbf, 0x09, 0x60, 0xe8, 0xac, 0x0c, 0xff, 0xc6, 0x7b,
	0xad, 0x03, 0x02, 0x3c, 0xb8, 0x09, 0x06, 0x06, 0x5a, 0x44, 0xb5, 0x69, 0xbf, 0x09, 0x60, 0xe8, 0xac, 0x0c, 0xff, 0xc6, 0x7b,
	0xad, 0x03, 0x02, 0x3c, 0xb8, 0x09, 0x06, 0x06, 0x5a, 0x44, 0xb5, 0x69, 0xbf, 0x09, 0x60, 0xe8, 0xac, 0x0c, 0xff, 0xc6, 0x7b,
	0xad, 0x03, 0x02, 0x3c, 0xb8, 0x09, 0x06, 0x06, 0x5a, 0x44, 0xb5, 0x69, 0xbf, 0x09, 0x60, 0xe8, 0xac, 0x0c, 0xff, 0xc6, 0x7b,
	0xad, 0x03, 0x02, 0x3c, 0xb8, 0x09, 0x06, 0x06, 0x5a, 0x44, 0xb5, 0x69, 0xbf, 0x09, 0x60, 0xe8, 0xac, 0x0c, 0xff, 0xc6, 0x7b,
	0xad, 0x03, 0x02, 0x3c, 0xb8, 0x09, 0x06, 0x06, 0x5a, 0x44, 0xb5, 0x69, 0xbf, 0x09, 0x60, 0xe8, 0xac, 0x0c, 0xff, 0xc6, 0x7b,
	0xad, 0x03, 0x02, 0x3c, 0xb8, 0x09, 0x06, 0x06, 0x5a, 0x44, 0xb5, 0x69, 0xbf, 0x09, 0x60, 0xe8, 0xac, 0x0c, 0xff, 0xc6, 0x7b,
	0xad, 0x03, 0x02, 0x3c, 0xb8, 0x09, 0x06, 0x06, 0x5a, 0x44, 0xb5, 0x69, 0xbf, 0x09, 0x60, 0xe8, 0xac, 0x0c, 0xff, 0xc6, 0x7b,
	0xad, 0x03, 0x02, 0x3c, 0xb8, 0x09, 0x06, 0x06, 0x5a, 0x44, 0xb5, 0x69, 0xbf, 0x09, 0x60, 0xe8, 0xac, 0x0c, 0xff, 0xc6, 0x7b,
	0xad, 0x03, 0x02, 0x3c, 0xb8, 0x09, 0x06, 0x06, 0x5a, 0x44, 0xb5, 0x69, 0xbf, 0x09, 0x60, 0xe8, 0xac, 0x0c, 0xff, 0xc6, 0x7b,
	0xad, 0x03, 0x02, 0x3c, 0xb8, 0x09, 0x06, 0x06, 0x5a, 0x44, 0xb5, 0x69, 0xbf, 0x09, 0x60, 0xe8, 0xac, 0x0c, 0xff, 0xc6, 0x7b,
	0xad, 0x03, 0x02, 0x3c, 0xb8, 0x09, 0x06, 0x06, 0x5a, 0x44, 0xb5, 0x69, 0xbf, 0x09, 0x60, 0xe8, 0xac, 0x0c, 0xff, 0xc6, 0x7b,
	0xad, 0x03, 0x02, 0x3c, 0xb8, 0x09, 0x06, 0x06, 0x5a, 0x44, 0xb5, 0x69, 0xbf, 0x09, 0x60, 0xe8, 0xac, 0x0c, 0xff, 0xc6, 0x7b,
	0xad, 0x03, 0x02, 0x3c, 0xb8, 0x09, 0x06, 0x06, 0x5a, 0x44, 0xb5, 0x69, 0xbf, 0x09, 0x60, 0xe8, 0xac, 0x0c, 0xff, 0xc6, 0x7b,
	0xad, 0x03, 0x02, 0x3c, 0xb8, 0x09, 0x06, 0x06, 0x5a, 0x44, 0xb5, 0x69, 0xbf, 0x09, 0x60, 0xe8, 0xac, 0x0c, 0xff, 0xc6, 0x7b,
	0xad, 0x03, 0x02, 0x3c, 0xb8, 0x09, 0x06, 0x06, 0x5a, 0x44, 0xb5, 0x69, 0xbf, 0x09, 0x60, 0xe8, 0xac, 0x0c, 0xff, 0xc6, 0x7b,
	0xad, 0x03, 0x02, 0x3c, 0xb8, 0x09, 0x06, 0x06, 0x5a, 0x44, 0xb5, 0x69, 0xbf, 0x09, 0x60, 0xe8, 0xac, 0x0c, 0xff, 0xc6, 0x7b,
	0xad, 0x03, 0x02, 0x3c, 0xb8, 0x09, 0x06, 0x06, 0x5a, 0x44, 0xb5, 0x69, 0xbf, 0x09, 0x60, 0xe8, 0xac, 0x0c, 0xff, 0xc6, 0x7b,
	0xad, 0x03, 0x02, 0x3c, 0xb8, 0x09, 0x06, 0x06, 0x5a, 0x44, 0xb5, 0x69, 0xbf, 0x09, 0x60, 0xe8, 0xac, 0x0c, 0xff, 0xc6, 0x7b,
	0xad, 0x03, 0x02, 0x3c, 0xb8, 0x09, 0x06, 0x06, 0x5a, 0x44, 0xb5, 0x69, 0xbf, 0x09, 0x60, 0xe8, 0xac, 0x0c, 0xff, 0xc6, 0x7b,
	0xad, 0x03, 0x02, 0x3c, 0xb8, 0x09, 0x06, 0x06, 0x5a, 0x44, 0xb5, 0x69, 0xbf, 0x09, 0x60, 0xe8, 0xac, 0x0c, 0xff, 0xc6, 0x7b,
	0xad, 0x03, 0x02, 0x3c, 0xb8, 0x09, 0x06, 0x06, 0x5a, 0x44, 0xb5, 0x69, 0xbf, 0x09, 0x60, 0xe8, 0xac, 0x0c, 0xff, 0xc6, 0x7b,
	0xad, 0x03, 0x02, 0x3c, 0xb8, 0x09, 0x06, 0x06, 0x5a, 0x44, 0xb5, 0x69, 0xbf, 0x09, 0x60, 0xe8, 0xac, 0x0c, 0xff, 0xc6, 0x7b,
	0xad, 0x03, 0x02, 0x3c, 0xb8, 0x09, 0x06, 0x06, 0x5a, 0x44, 0xb5, 0x69, 0xbf, 0x09, 0x60, 0xe8, 0xac, 0x0c, 0xff, 0xc6, 0x7b,
	0xad, 0x03, 0x02, 0x3c, 0xb8, 0x09, 0x06, 0x06, 0x5a, 0x44, 0xb5, 0x69, 0xbf, 0x09, 0x60, 0xe8, 0xac, 0x0c, 0xff, 0xc6, 0x7b,
	0xad, 0x03, 0x02, 0x3c, 0xb8, 0x09, 0x06, 0x06, 0x5a, 0x44, 0xb5, 0x69, 0xbf, 0x09, 0x60, 0xe8, 0xac, 0x0c, 0xff, 0xc6, 0x7b,
	0xad, 0x03, 0x02, 0x3c, 0xb8, 0x09, 0x06, 0x06, 0x5a, 0x44, 0xb5, 0x69, 0xbf, 0x09, 0x60, 0xe8, 0xac, 0x0c, 0xff, 0xc6, 0x7b,
	0xad, 0x03, 0x02, 0x3c, 0xb8, 0x09, 0x06, 0x06, 0x5a, 0x44, 0xb5, 0x69, 0xbf, 0x09, 0x60, 0xe8, 0xac, 0x0c, 0xff, 0xc6, 0x7b,
	0xad, 0x03, 0x02, 0x3c, 0xb8, 0x09, 0x06, 0x06, 0x5a, 0x44, 0xb5, 0x69, 0xbf, 0x09, 0x60, 0xe8, 0xac, 0x0c, 0xff, 0xc6, 0x7b,
	0xad, 0x03, 0x02, 0x3c, 0xb8, 0x09, 0x06, 0x06, 0x5a, 0x44, 0xb5, 0x69, 0xbf, 0x09, 0x60, 0xe8, 0xac, 0x0c, 0xff, 0xc6, 0x7b,
	0xad, 0x03, 0x02, 0x3c, 0xb8, 0x09, 0x06, 0x06, 0x5a, 0x44, 0xb5, 0x69, 0xbf, 0x09, 0x60, 0xe8, 0xac, 0x0c, 0xff, 0xc6, 0x7b,
	0xad, 0x03, 0x02, 0x3c, 0xb8, 0x09, 0x06, 0x06, 0x5a, 0x44, 0xb5, 0x69, 0xbf, 0x09, 0x60, 0xe8, 0xac, 0x0c, 0xff, 0xc6, 0x7b,
	0xad, 0x03, 0x02, 0x3c, 0xb8, 0x09, 0x06, 0x06, 0x5a, 0x44, 0xb5, 0x69, 0xbf, 0x09, 0x60, 0xe8, 0xac, 0x0c, 0xff, 0xc6, 0x7b,
	0xad, 0x03, 0x02, 0x3c, 0xb8, 0x09, 0x06, 0x06, 0x5a, 0x44, 0xb5, 0x69, 0xbf, 0x09, 0x60, 0xe8, 0xac, 0x0c, 0xff, 0xc6, 0x7b,
	0xad, 0x03, 0x02, 0x3c, 0xb8, 0x09, 0x06, 0x06, 0x5a, 0x44, 0xb5, 0x69, 0xbf, 0x09, 0x60, 0xe8, 0xac, 0x0c, 0xff, 0xc6, 0x7b,
	0xad, 0x03, 0x02, 0x3c, 0xb8, 0x09, 0x06, 0x06, 0x5a, 0x44, 0xb5, 0x69, 0xbf, 0x09, 0x60, 0xe8, 0xac, 0x0c, 0xff, 0xc6, 0x7b,
	0xad, 0x03, 0x02, 0x3c, 0xb8, 0x09, 0x06, 0x06, 0x5a, 0x44, 0xb5, 0x69, 0xbf, 0x09, 0x60, 0xe8, 0xac, 0x0c, 0xff, 0xc6, 0x7b,
	0xad, 0x03, 0x02, 0x3c, 0xb8, 0x09, 0x06, 0x06, 0x5a, 0x44, 0xb5, 0x69, 0xbf, 0x09, 0x60, 0xe8, 0xac, 0x0c, 0xff, 0xc6, 0x7b,
	0xad, 0x03, 0x02, 0x3c, 0xb8, 0x09, 0x06, 0x06, 0x5a, 0x44, 0xb5, 0x69, 0xbf, 0x09, 0x60, 0xe8, 0xac, 0x0c, 0xff, 0xc6, 0x7b,
	0xad, 0x03, 0x02, 0x3c, 0xb8, 0x09, 0x06, 0x06, 0x5a, 0x44, 0xb5, 0x69, 0xbf, 0x09, 0x60, 0xe8, 0xac, 0x0c, 0xff, 0xc6, 0x7b,
	0xad, 0x03, 0x02, 0x3c, 0xb8, 0x09, 0x06, 0x06, 0x5a, 0x44, 0xb5, 0x69, 0xbf, 0x09, 0x60, 0xe8, 0xac, 0x0c, 0xff, 0xc6, 0x7b,
	0xad, 0x03, 0x02, 0x3c, 0xb8, 0x09, 0x06, 0x06, 0x5a, 0x44, 0xb5, 0x69, 0xbf, 0x09, 0x60, 0xe8, 0xac, 0x0c, 0xff, 0xc6, 0x7b,
	0xad, 0x03, 0x02, 0x3c, 0xb8, 0x09, 0x06, 0x06, 0x5a, 0x44, 0xb5, 0x69, 0xbf, 0x09, 0x60, 0xe8, 0xac, 0x0c, 0xff, 0xc6, 0x7b,
};

static unsigned char *night_mode_data[MODE_MAX] = {
	night_mode_data_natural,
	night_mode_data_natural,
	night_mode_data_natural,
	night_mode_data_natural,
	night_mode_data_auto,
	night_mode_data_natural,
};

static inline int get_hbm_index(int idx)
{
	int i = 0;
	int idx_list[] = {
		40000	/* idx < 40000: HBM_OFF */
				/* idx >= 40000: HBM_ON */
	};

	while (i < ARRAY_SIZE(idx_list)) {
		if (idx < idx_list[i])
			break;
		i++;
	}

	return i;
}

static unsigned char BYPASS_1[] = {
	//start
	0x5D, // CRC
	0x00, // CRC on/off
	0x00,
	0x00, // TCS on/off
	0x00, // ACE on/off
	0x00, // ACE gain
	0x00, // ORE on/off
	0x00, // ORE level
};

static unsigned char BYPASS_2[] = {
	0x62, // CRC
	0x01, // crc_bypass
	0xff, // crc_lut_mode1_rr
	0x00, // crc_lut_mode1_rg
	0x00, // crc_lut_mode1_rb
	0x00, // crc_lut_mode1_gr
	0xff, // crc_lut_mode1_gg
	0x00, // crc_lut_mode1_gb
	0x00, // crc_lut_mode1_br
	0x00, // crc_lut_mode1_bg
	0xff, // crc_lut_mode1_bb
	0x00, // crc_lut_mode1_cr
	0xff, // crc_lut_mode1_cg
	0xff, // crc_lut_mode1_cb
	0xff, // crc_lut_mode1_mr
	0x00, // crc_lut_mode1_mg
	0xff, // crc_lut_mode1_mb
	0xff, // crc_lut_mode1_yr
	0xff, // crc_lut_mode1_yg
	0x00, // crc_lut_mode1_yb
	0xff, // crc_lut_mode1_wr
	0xff, // crc_lut_mode1_wg
	0xff, // crc_lut_mode1_wb
};

static unsigned char BYPASS_3[] = {
	0xb0,
	0x00,
	0xa0,
	0x62,
};

static unsigned char BYPASS_4[] = {
	0x62, // TCS
	0x21, // bypass, y_type
	0x01, // obj_sel, skin_boundary_para
	0x79, // skin_boundary_para
	0x00,
	0x01,
	0x00,
	0x04,
	0x01,
	0x1E,
	0x80,
	0x01,
	0x00,
	0x02,
	0x01, // grass_boundary_para
	0x00,
	0xF0,
	0x00,
	0x00,
	0x59,
	0x01,
	0x00,
	0xF0,
	0x00,
	0x00,
	0x59,
	0x01, // sky_boundary_para
	0x02,
	0x49,
	0x01,
	0x00,
	0x60,
	0x01,
	0x02,
	0x5A,
	0x01,
	0x00,
	0x63,
	0x00, // skin_boundary_para
	0x00,
	0xFF,
	0x00,
	0x00,
	0x86,
	0x00,
	0x11,
	0xAC,
	0x00,
	0x00,
	0xFF,
	0x00, // grass_boundary_para
	0x00,
	0x9F,
	0x00,
	0x00,
	0x33,
	0x00,
	0x00,
	0xF0,
	0x00,
	0x00,
	0x72,
	0x00, // sky_boundary_para
	0x01,
	0xAE,
	0x00,
	0x00,
	0x89,
	0x00,
	0x02,
	0x16,
	0x00,
	0x00,
	0xB3,
	0x00, // skin_boundary_para
	0x00,
	0x04,
	0x00,
	0x8F,
	0x00,
	0x01,
	0x00,
	0x87,
	0x01,
	0x02,
	0x22,
	0x00, // grass_boundary_para
	0x0B,
	0x24,
	0x00,
	0x0A,
	0x18,
	0x01,
	0x04,
	0x6A,
	0x01,
	0x06,
	0xCD,
	0x00, // sky_boundary_para
	0x04,
	0x98,
	0x00,
	0x0F,
	0xC1,
	0x01,
	0x06,
	0xE6,
	0x01,
	0x0A,
	0xE1,
	0x64, // skin_boundary_idx
	0x62, // grass_boundary_idx
	0x61, // sky_boundary_idx
	0x24, // Skin Color Gain
	0x80, // grass Color Gain
	0x80, // sky Color Gai
	0x80, // Target Skin Color (Cb)
	0x52, // Target grass Color (Cb)
	0xAE, // Target Sky Color (Cb)
	0x86, // Target Skin Color (Cr)
	0x69, // Target grass Color (Cr)
	0x58, // Target Sky Color (Cr)
	0x00, // Threshold Value of Skin Color Detection
	0x00, // Threshold Value of grass Color Detection
	0x00, // Threshold Value of Sky Color Detection
	0x32, // Minimum Y of Skin Brightness Control
	0x1E, // Minimum Y of grass Brightness Control
	0x1E, // Minimum Y of Sky Brightness Control
	0xDC, // Maximum Y of Skin Brightness Control
	0xC8, // Maximum Y of grass Brightness Control
	0xC8, // Maximum Y of Sky Brightness Control
	0x88, // Reference Y of Skin Brightness Control
	0x78, // Reference Y of grass Brightness Control
	0x78, // Reference Y of Sky Brightness Control
	0x8A, // Target Y of Skin Brihgtness Control
	0x78, // Target Y of grass Brihgtness Control
	0x78, // Target Y of Sky Brihgtness Control
	0x00, // Brightness Parameter
	0x24,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x8A,
	0x00,
	0x80,
	0x00,
	0x80,
	0x01,
	0x86,
	0x00,
	0x00,
	0x00,
	0x00,
	0x82,
	0xFA,
	0x80,
	0x00,
	0x80,
	0x00,
	0x7C,
	0xF4,
	0x80,
	0x00,
	0x80,
	0x00,
	0x00, // dummy 0x62 P326
	0x00, // dummy 0x62 P327
	0x00, // dummy 0x62 P328
	0x00, // dummy 0x62 P329
	0x00, // dummy 0x62 P330
	0x00, // ACE bypass : 0x01, ACE on : 0x00
	0xf0,
	0x03,
	0xff,
	0x04,
	0xc8,
	0xc8,
	0xff,
	0xff,
	0x28,
	0x28,
	0x3c,
	0x00,
	0x00,
	0x05,
	0x00,
	0x64,
	0x1e,
	0x1e,
	0x10,
	0x01,
	0x00,
	0x10,
	0x64,
	0x06,
	0x08,
	0x08,
	0x10,
	0x00,
	0x20,
	0x00,
	0x10,
	0x00,
	0x04,
	0x10,
	0x0a,
	0x00,
	0x00,
	0x00,
	0x02,
	0x00,
	0x04,
	0x00,
	0xff,
	0x00,
	0xff,
	0x00,
};

static unsigned char COLOR_LENS_1[] = {
	//start
	0x5D, // CRC
	0x06, // CRC on/off
	0x00,
	0x00, // TCS on/off
	0x00, // ACE on/off
	0x00, // ACE gain
	0x00, // ORE on/off
	0x00, // ORE level
};

static unsigned char COLOR_LENS_2[] = {
	0x62, // CRC
	0x01, // crc_bypass
	0xff, // crc_lut_mode1_rr
	0x00, // crc_lut_mode1_rg
	0x00, // crc_lut_mode1_rb
	0x00, // crc_lut_mode1_gr
	0xff, // crc_lut_mode1_gg
	0x00, // crc_lut_mode1_gb
	0x00, // crc_lut_mode1_br
	0x00, // crc_lut_mode1_bg
	0xff, // crc_lut_mode1_bb
	0x00, // crc_lut_mode1_cr
	0xff, // crc_lut_mode1_cg
	0xff, // crc_lut_mode1_cb
	0xff, // crc_lut_mode1_mr
	0x00, // crc_lut_mode1_mg
	0xff, // crc_lut_mode1_mb
	0xff, // crc_lut_mode1_yr
	0xff, // crc_lut_mode1_yg
	0x00, // crc_lut_mode1_yb
	0xff, // crc_lut_mode1_wr
	0xff, // crc_lut_mode1_wg
	0xff, // crc_lut_mode1_wb
};

static unsigned char COLOR_LENS_3[] = {
	0xb0,
	0x00,
	0xa0,
	0x62,
};

static unsigned char COLOR_LENS_4[] = {
	0x62, // TCS
	0x21, // bypass, y_type
	0x01, // obj_sel, skin_boundary_para
	0x79, // skin_boundary_para
	0x00,
	0x01,
	0x00,
	0x04,
	0x01,
	0x1E,
	0x80,
	0x01,
	0x00,
	0x02,
	0x01, // grass_boundary_para
	0x00,
	0xF0,
	0x00,
	0x00,
	0x59,
	0x01,
	0x00,
	0xF0,
	0x00,
	0x00,
	0x59,
	0x01, // sky_boundary_para
	0x02,
	0x49,
	0x01,
	0x00,
	0x60,
	0x01,
	0x02,
	0x5A,
	0x01,
	0x00,
	0x63,
	0x00, // skin_boundary_para
	0x00,
	0xFF,
	0x00,
	0x00,
	0x86,
	0x00,
	0x11,
	0xAC,
	0x00,
	0x00,
	0xFF,
	0x00, // grass_boundary_para
	0x00,
	0x9F,
	0x00,
	0x00,
	0x33,
	0x00,
	0x00,
	0xF0,
	0x00,
	0x00,
	0x72,
	0x00, // sky_boundary_para
	0x01,
	0xAE,
	0x00,
	0x00,
	0x89,
	0x00,
	0x02,
	0x16,
	0x00,
	0x00,
	0xB3,
	0x00, // skin_boundary_para
	0x00,
	0x04,
	0x00,
	0x8F,
	0x00,
	0x01,
	0x00,
	0x87,
	0x01,
	0x02,
	0x22,
	0x00, // grass_boundary_para
	0x0B,
	0x24,
	0x00,
	0x0A,
	0x18,
	0x01,
	0x04,
	0x6A,
	0x01,
	0x06,
	0xCD,
	0x00, // sky_boundary_para
	0x04,
	0x98,
	0x00,
	0x0F,
	0xC1,
	0x01,
	0x06,
	0xE6,
	0x01,
	0x0A,
	0xE1,
	0x64, // skin_boundary_idx
	0x62, // grass_boundary_idx
	0x61, // sky_boundary_idx
	0x24, // Skin Color Gain
	0x80, // grass Color Gain
	0x80, // sky Color Gai
	0x80, // Target Skin Color (Cb)
	0x52, // Target grass Color (Cb)
	0xAE, // Target Sky Color (Cb)
	0x86, // Target Skin Color (Cr)
	0x69, // Target grass Color (Cr)
	0x58, // Target Sky Color (Cr)
	0x00, // Threshold Value of Skin Color Detection
	0x00, // Threshold Value of grass Color Detection
	0x00, // Threshold Value of Sky Color Detection
	0x32, // Minimum Y of Skin Brightness Control
	0x1E, // Minimum Y of grass Brightness Control
	0x1E, // Minimum Y of Sky Brightness Control
	0xDC, // Maximum Y of Skin Brightness Control
	0xC8, // Maximum Y of grass Brightness Control
	0xC8, // Maximum Y of Sky Brightness Control
	0x88, // Reference Y of Skin Brightness Control
	0x78, // Reference Y of grass Brightness Control
	0x78, // Reference Y of Sky Brightness Control
	0x8A, // Target Y of Skin Brihgtness Control
	0x78, // Target Y of grass Brihgtness Control
	0x78, // Target Y of Sky Brihgtness Control
	0x00, // Brightness Parameter
	0x24,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x8A,
	0x00,
	0x80,
	0x00,
	0x80,
	0x01,
	0x86,
	0x00,
	0x00,
	0x00,
	0x00,
	0x82,
	0xFA,
	0x80,
	0x00,
	0x80,
	0x00,
	0x7C,
	0xF4,
	0x80,
	0x00,
	0x80,
	0x00,
	0x00, // dummy 0x62 P326
	0x00, // dummy 0x62 P327
	0x00, // dummy 0x62 P328
	0x00, // dummy 0x62 P329
	0x00, // dummy 0x62 P330
	0x00, // ACE bypass : 0x01, ACE on : 0x00
	0xf0,
	0x03,
	0xff,
	0x04,
	0xc8,
	0xc8,
	0xff,
	0xff,
	0x28,
	0x28,
	0x3c,
	0x00,
	0x00,
	0x05,
	0x00,
	0x64,
	0x1e,
	0x1e,
	0x10,
	0x01,
	0x00,
	0x10,
	0x64,
	0x06,
	0x08,
	0x08,
	0x10,
	0x00,
	0x20,
	0x00,
	0x10,
	0x00,
	0x04,
	0x10,
	0x0a,
	0x00,
	0x00,
	0x00,
	0x02,
	0x00,
	0x04,
	0x00,
	0xff,
	0x00,
	0xff,
	0x00,
};

static unsigned char NIGHT_MODE_1[] = {
	//start
	0x5D, // CRC
	0x06, // CRC on/off
	0x00,
	0x02, // TCS on/off
	0x00, // ACE on/off
	0x00, // ACE gain
	0x00, // ORE on/off
	0x00, // ORE level
};

static unsigned char NIGHT_MODE_2[] = {
	0x62, // CRC
	0x00, // crc_bypass
	0xff, // crc_lut_mode1_rr
	0x00, // crc_lut_mode1_rg
	0x00, // crc_lut_mode1_rb
	0x00, // crc_lut_mode1_gr
	0xff, // crc_lut_mode1_gg
	0x00, // crc_lut_mode1_gb
	0x00, // crc_lut_mode1_br
	0x00, // crc_lut_mode1_bg
	0xff, // crc_lut_mode1_bb
	0x00, // crc_lut_mode1_cr
	0xff, // crc_lut_mode1_cg
	0xff, // crc_lut_mode1_cb
	0xff, // crc_lut_mode1_mr
	0x00, // crc_lut_mode1_mg
	0xff, // crc_lut_mode1_mb
	0xff, // crc_lut_mode1_yr
	0xff, // crc_lut_mode1_yg
	0x00, // crc_lut_mode1_yb
	0xff, // crc_lut_mode1_wr
	0xff, // crc_lut_mode1_wg
	0xff, // crc_lut_mode1_wb
};

static unsigned char NIGHT_MODE_3[] = {
	0xb0,
	0x00,
	0xa0,
	0x62,
};

static unsigned char NIGHT_MODE_4[] = {
	0x62, // TCS
	0x21, // bypass, y_type
	0x01, // obj_sel, skin_boundary_para
	0x79, // skin_boundary_para
	0x00,
	0x01,
	0x00,
	0x04,
	0x01,
	0x1E,
	0x80,
	0x01,
	0x00,
	0x02,
	0x01, // grass_boundary_para
	0x00,
	0xF0,
	0x00,
	0x00,
	0x59,
	0x01,
	0x00,
	0xF0,
	0x00,
	0x00,
	0x59,
	0x01, // sky_boundary_para
	0x02,
	0x49,
	0x01,
	0x00,
	0x60,
	0x01,
	0x02,
	0x5A,
	0x01,
	0x00,
	0x63,
	0x00, // skin_boundary_para
	0x00,
	0xFF,
	0x00,
	0x00,
	0x86,
	0x00,
	0x11,
	0xAC,
	0x00,
	0x00,
	0xFF,
	0x00, // grass_boundary_para
	0x00,
	0x9F,
	0x00,
	0x00,
	0x33,
	0x00,
	0x00,
	0xF0,
	0x00,
	0x00,
	0x72,
	0x00, // sky_boundary_para
	0x01,
	0xAE,
	0x00,
	0x00,
	0x89,
	0x00,
	0x02,
	0x16,
	0x00,
	0x00,
	0xB3,
	0x00, // skin_boundary_para
	0x00,
	0x04,
	0x00,
	0x8F,
	0x00,
	0x01,
	0x00,
	0x87,
	0x01,
	0x02,
	0x22,
	0x00, // grass_boundary_para
	0x0B,
	0x24,
	0x00,
	0x0A,
	0x18,
	0x01,
	0x04,
	0x6A,
	0x01,
	0x06,
	0xCD,
	0x00, // sky_boundary_para
	0x04,
	0x98,
	0x00,
	0x0F,
	0xC1,
	0x01,
	0x06,
	0xE6,
	0x01,
	0x0A,
	0xE1,
	0x64, // skin_boundary_idx
	0x62, // grass_boundary_idx
	0x61, // sky_boundary_idx
	0x24, // Skin Color Gain
	0x80, // grass Color Gain
	0x80, // sky Color Gai
	0x80, // Target Skin Color (Cb)
	0x52, // Target grass Color (Cb)
	0xAE, // Target Sky Color (Cb)
	0x86, // Target Skin Color (Cr)
	0x69, // Target grass Color (Cr)
	0x58, // Target Sky Color (Cr)
	0x00, // Threshold Value of Skin Color Detection
	0x00, // Threshold Value of grass Color Detection
	0x00, // Threshold Value of Sky Color Detection
	0x32, // Minimum Y of Skin Brightness Control
	0x1E, // Minimum Y of grass Brightness Control
	0x1E, // Minimum Y of Sky Brightness Control
	0xDC, // Maximum Y of Skin Brightness Control
	0xC8, // Maximum Y of grass Brightness Control
	0xC8, // Maximum Y of Sky Brightness Control
	0x88, // Reference Y of Skin Brightness Control
	0x78, // Reference Y of grass Brightness Control
	0x78, // Reference Y of Sky Brightness Control
	0x8A, // Target Y of Skin Brihgtness Control
	0x78, // Target Y of grass Brihgtness Control
	0x78, // Target Y of Sky Brihgtness Control
	0x00, // Brightness Parameter
	0x24,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x8A,
	0x00,
	0x80,
	0x00,
	0x80,
	0x01,
	0x86,
	0x00,
	0x00,
	0x00,
	0x00,
	0x82,
	0xFA,
	0x80,
	0x00,
	0x80,
	0x00,
	0x7C,
	0xF4,
	0x80,
	0x00,
	0x80,
	0x00,
	0x00, // dummy 0x62 P326
	0x00, // dummy 0x62 P327
	0x00, // dummy 0x62 P328
	0x00, // dummy 0x62 P329
	0x00, // dummy 0x62 P330
	0x00, // ACE bypass : 0x01, ACE on : 0x00
	0xf0,
	0x03,
	0xff,
	0x04,
	0xc8,
	0xc8,
	0xff,
	0xff,
	0x28,
	0x28,
	0x3c,
	0x00,
	0x00,
	0x05,
	0x00,
	0x64,
	0x1e,
	0x1e,
	0x10,
	0x01,
	0x00,
	0x10,
	0x64,
	0x06,
	0x08,
	0x08,
	0x10,
	0x00,
	0x20,
	0x00,
	0x10,
	0x00,
	0x04,
	0x10,
	0x0a,
	0x00,
	0x00,
	0x00,
	0x02,
	0x00,
	0x04,
	0x00,
	0xff,
	0x00,
	0xff,
	0x00,
};

static unsigned char LIGHT_NOTIFICATION_1[] = {
	//start
	0x5D, // CRC
	0x06, // CRC on/off
	0x00,
	0x02, // TCS on/off
	0x00, // ACE on/off
	0x00, // ACE gain
	0x00, // ORE on/off
	0x00, // ORE level
};

static unsigned char LIGHT_NOTIFICATION_2[] = {
	0x62, // CRC
	0x00, // crc_bypass
	0xff, // crc_lut_mode1_rr
	0x60, // crc_lut_mode1_rg
	0x13, // crc_lut_mode1_rb
	0x66, // crc_lut_mode1_gr
	0xf9, // crc_lut_mode1_gg
	0x13, // crc_lut_mode1_gb
	0x66, // crc_lut_mode1_br
	0x60, // crc_lut_mode1_bg
	0xac, // crc_lut_mode1_bb
	0x66, // crc_lut_mode1_cr
	0xf9, // crc_lut_mode1_cg
	0xac, // crc_lut_mode1_cb
	0xff, // crc_lut_mode1_mr
	0x60, // crc_lut_mode1_mg
	0xac, // crc_lut_mode1_mb
	0xff, // crc_lut_mode1_yr
	0xf9, // crc_lut_mode1_yg
	0x13, // crc_lut_mode1_yb
	0xff, // crc_lut_mode1_wr
	0xf9, // crc_lut_mode1_wg
	0xac, // crc_lut_mode1_wb
};

static unsigned char LIGHT_NOTIFICATION_3[] = {
	0xb0,
	0x00,
	0xa0,
	0x62,
};

static unsigned char LIGHT_NOTIFICATION_4[] = {
	0x62, // TCS
	0x21, // bypass, y_type
	0x01, // obj_sel, skin_boundary_para
	0x79, // skin_boundary_para
	0x00,
	0x01,
	0x00,
	0x04,
	0x01,
	0x1E,
	0x80,
	0x01,
	0x00,
	0x02,
	0x01, // grass_boundary_para
	0x00,
	0xF0,
	0x00,
	0x00,
	0x59,
	0x01,
	0x00,
	0xF0,
	0x00,
	0x00,
	0x59,
	0x01, // sky_boundary_para
	0x02,
	0x49,
	0x01,
	0x00,
	0x60,
	0x01,
	0x02,
	0x5A,
	0x01,
	0x00,
	0x63,
	0x00, // skin_boundary_para
	0x00,
	0xFF,
	0x00,
	0x00,
	0x86,
	0x00,
	0x11,
	0xAC,
	0x00,
	0x00,
	0xFF,
	0x00, // grass_boundary_para
	0x00,
	0x9F,
	0x00,
	0x00,
	0x33,
	0x00,
	0x00,
	0xF0,
	0x00,
	0x00,
	0x72,
	0x00, // sky_boundary_para
	0x01,
	0xAE,
	0x00,
	0x00,
	0x89,
	0x00,
	0x02,
	0x16,
	0x00,
	0x00,
	0xB3,
	0x00, // skin_boundary_para
	0x00,
	0x04,
	0x00,
	0x8F,
	0x00,
	0x01,
	0x00,
	0x87,
	0x01,
	0x02,
	0x22,
	0x00, // grass_boundary_para
	0x0B,
	0x24,
	0x00,
	0x0A,
	0x18,
	0x01,
	0x04,
	0x6A,
	0x01,
	0x06,
	0xCD,
	0x00, // sky_boundary_para
	0x04,
	0x98,
	0x00,
	0x0F,
	0xC1,
	0x01,
	0x06,
	0xE6,
	0x01,
	0x0A,
	0xE1,
	0x64, // skin_boundary_idx
	0x62, // grass_boundary_idx
	0x61, // sky_boundary_idx
	0x24, // Skin Color Gain
	0x80, // grass Color Gain
	0x80, // sky Color Gai
	0x80, // Target Skin Color (Cb)
	0x52, // Target grass Color (Cb)
	0xAE, // Target Sky Color (Cb)
	0x86, // Target Skin Color (Cr)
	0x69, // Target grass Color (Cr)
	0x58, // Target Sky Color (Cr)
	0x00, // Threshold Value of Skin Color Detection
	0x00, // Threshold Value of grass Color Detection
	0x00, // Threshold Value of Sky Color Detection
	0x32, // Minimum Y of Skin Brightness Control
	0x1E, // Minimum Y of grass Brightness Control
	0x1E, // Minimum Y of Sky Brightness Control
	0xDC, // Maximum Y of Skin Brightness Control
	0xC8, // Maximum Y of grass Brightness Control
	0xC8, // Maximum Y of Sky Brightness Control
	0x88, // Reference Y of Skin Brightness Control
	0x78, // Reference Y of grass Brightness Control
	0x78, // Reference Y of Sky Brightness Control
	0x8A, // Target Y of Skin Brihgtness Control
	0x78, // Target Y of grass Brihgtness Control
	0x78, // Target Y of Sky Brihgtness Control
	0x00, // Brightness Parameter
	0x24,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x8A,
	0x00,
	0x80,
	0x00,
	0x80,
	0x01,
	0x86,
	0x00,
	0x00,
	0x00,
	0x00,
	0x82,
	0xFA,
	0x80,
	0x00,
	0x80,
	0x00,
	0x7C,
	0xF4,
	0x80,
	0x00,
	0x80,
	0x00,
	0x00, // dummy 0x62 P326
	0x00, // dummy 0x62 P327
	0x00, // dummy 0x62 P328
	0x00, // dummy 0x62 P329
	0x00, // dummy 0x62 P330
	0x00, // ACE bypass : 0x01, ACE on : 0x00
	0xf0,
	0x03,
	0xff,
	0x04,
	0xc8,
	0xc8,
	0xff,
	0xff,
	0x28,
	0x28,
	0x3c,
	0x00,
	0x00,
	0x05,
	0x00,
	0x64,
	0x1e,
	0x1e,
	0x10,
	0x01,
	0x00,
	0x10,
	0x64,
	0x06,
	0x08,
	0x08,
	0x10,
	0x00,
	0x20,
	0x00,
	0x10,
	0x00,
	0x04,
	0x10,
	0x0a,
	0x00,
	0x00,
	0x00,
	0x02,
	0x00,
	0x04,
	0x00,
	0xff,
	0x00,
	0xff,
	0x00,
};

static unsigned char SCREEN_CURTAIN_1[] = {
	//start
	0x5D, // CRC
	0x06, // CRC on/off
	0x00,
	0x00, // TCS on/off
	0x00, // ACE on/off
	0x00, // ACE gain
	0x00, // ORE on/off
	0x00, // ORE level
};

static unsigned char SCREEN_CURTAIN_2[] = {
	0x62, // CRC
	0x01, // crc_bypass
	0x00, // crc_lut_mode1_rr
	0x00, // crc_lut_mode1_rg
	0x00, // crc_lut_mode1_rb
	0x00, // crc_lut_mode1_gr
	0x00, // crc_lut_mode1_gg
	0x00, // crc_lut_mode1_gb
	0x00, // crc_lut_mode1_br
	0x00, // crc_lut_mode1_bg
	0x00, // crc_lut_mode1_bb
	0x00, // crc_lut_mode1_cr
	0x00, // crc_lut_mode1_cg
	0x00, // crc_lut_mode1_cb
	0x00, // crc_lut_mode1_mr
	0x00, // crc_lut_mode1_mg
	0x00, // crc_lut_mode1_mb
	0x00, // crc_lut_mode1_yr
	0x00, // crc_lut_mode1_yg
	0x00, // crc_lut_mode1_yb
	0x00, // crc_lut_mode1_wr
	0x00, // crc_lut_mode1_wg
	0x00, // crc_lut_mode1_wb
};

static unsigned char SCREEN_CURTAIN_3[] = {
	0xb0,
	0x00,
	0xa0,
	0x62,
};

static unsigned char SCREEN_CURTAIN_4[] = {
	0x62, // TCS
	0x21, // bypass, y_type
	0x01, // obj_sel, skin_boundary_para
	0x79, // skin_boundary_para
	0x00,
	0x01,
	0x00,
	0x04,
	0x01,
	0x1E,
	0x80,
	0x01,
	0x00,
	0x02,
	0x01, // grass_boundary_para
	0x00,
	0xF0,
	0x00,
	0x00,
	0x59,
	0x01,
	0x00,
	0xF0,
	0x00,
	0x00,
	0x59,
	0x01, // sky_boundary_para
	0x02,
	0x49,
	0x01,
	0x00,
	0x60,
	0x01,
	0x02,
	0x5A,
	0x01,
	0x00,
	0x63,
	0x00, // skin_boundary_para
	0x00,
	0xFF,
	0x00,
	0x00,
	0x86,
	0x00,
	0x11,
	0xAC,
	0x00,
	0x00,
	0xFF,
	0x00, // grass_boundary_para
	0x00,
	0x9F,
	0x00,
	0x00,
	0x33,
	0x00,
	0x00,
	0xF0,
	0x00,
	0x00,
	0x72,
	0x00, // sky_boundary_para
	0x01,
	0xAE,
	0x00,
	0x00,
	0x89,
	0x00,
	0x02,
	0x16,
	0x00,
	0x00,
	0xB3,
	0x00, // skin_boundary_para
	0x00,
	0x04,
	0x00,
	0x8F,
	0x00,
	0x01,
	0x00,
	0x87,
	0x01,
	0x02,
	0x22,
	0x00, // grass_boundary_para
	0x0B,
	0x24,
	0x00,
	0x0A,
	0x18,
	0x01,
	0x04,
	0x6A,
	0x01,
	0x06,
	0xCD,
	0x00, // sky_boundary_para
	0x04,
	0x98,
	0x00,
	0x0F,
	0xC1,
	0x01,
	0x06,
	0xE6,
	0x01,
	0x0A,
	0xE1,
	0x64, // skin_boundary_idx
	0x62, // grass_boundary_idx
	0x61, // sky_boundary_idx
	0x24, // Skin Color Gain
	0x80, // grass Color Gain
	0x80, // sky Color Gai
	0x80, // Target Skin Color (Cb)
	0x52, // Target grass Color (Cb)
	0xAE, // Target Sky Color (Cb)
	0x86, // Target Skin Color (Cr)
	0x69, // Target grass Color (Cr)
	0x58, // Target Sky Color (Cr)
	0x00, // Threshold Value of Skin Color Detection
	0x00, // Threshold Value of grass Color Detection
	0x00, // Threshold Value of Sky Color Detection
	0x32, // Minimum Y of Skin Brightness Control
	0x1E, // Minimum Y of grass Brightness Control
	0x1E, // Minimum Y of Sky Brightness Control
	0xDC, // Maximum Y of Skin Brightness Control
	0xC8, // Maximum Y of grass Brightness Control
	0xC8, // Maximum Y of Sky Brightness Control
	0x88, // Reference Y of Skin Brightness Control
	0x78, // Reference Y of grass Brightness Control
	0x78, // Reference Y of Sky Brightness Control
	0x8A, // Target Y of Skin Brihgtness Control
	0x78, // Target Y of grass Brihgtness Control
	0x78, // Target Y of Sky Brihgtness Control
	0x00, // Brightness Parameter
	0x24,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x8A,
	0x00,
	0x80,
	0x00,
	0x80,
	0x01,
	0x86,
	0x00,
	0x00,
	0x00,
	0x00,
	0x82,
	0xFA,
	0x80,
	0x00,
	0x80,
	0x00,
	0x7C,
	0xF4,
	0x80,
	0x00,
	0x80,
	0x00,
	0x00, // dummy 0x62 P326
	0x00, // dummy 0x62 P327
	0x00, // dummy 0x62 P328
	0x00, // dummy 0x62 P329
	0x00, // dummy 0x62 P330
	0x00, // ACE bypass : 0x01, ACE on : 0x00
	0xf0,
	0x03,
	0xff,
	0x04,
	0xc8,
	0xc8,
	0xff,
	0xff,
	0x28,
	0x28,
	0x3c,
	0x00,
	0x00,
	0x05,
	0x00,
	0x64,
	0x1e,
	0x1e,
	0x10,
	0x01,
	0x00,
	0x10,
	0x64,
	0x06,
	0x08,
	0x08,
	0x10,
	0x00,
	0x20,
	0x00,
	0x10,
	0x00,
	0x04,
	0x10,
	0x0a,
	0x00,
	0x00,
	0x00,
	0x02,
	0x00,
	0x04,
	0x00,
	0xff,
	0x00,
	0xff,
	0x00,
};

/******************** UI ********************/

static unsigned char DYNAMIC_UI_1[] = {
	//start
	0x5D, // CRC
	0x06, // CRC on/off
	0x00,
	0x02, // TCS on/off
	0x00, // ACE on/off
	0x00, // ACE gain
	0x00, // ORE on/off
	0x00, // ORE level
};

static unsigned char DYNAMIC_UI_2[] = {
	0x62, // CRC
	0x00, // crc_bypass
	0xc6, // crc_lut_mode1_rr
	0x00, // crc_lut_mode1_rg
	0x00, // crc_lut_mode1_rb
	0x10, // crc_lut_mode1_gr
	0xff, // crc_lut_mode1_gg
	0x00, // crc_lut_mode1_gb
	0x06, // crc_lut_mode1_br
	0x06, // crc_lut_mode1_bg
	0xda, // crc_lut_mode1_bb
	0x19, // crc_lut_mode1_cr
	0xf6, // crc_lut_mode1_cg
	0xe8, // crc_lut_mode1_cb
	0xe2, // crc_lut_mode1_mr
	0x00, // crc_lut_mode1_mg
	0xdc, // crc_lut_mode1_mb
	0xea, // crc_lut_mode1_yr
	0xdf, // crc_lut_mode1_yg
	0x02, // crc_lut_mode1_yb
	0xff, // crc_lut_mode1_wr
	0xfa, // crc_lut_mode1_wg
	0xf0, // crc_lut_mode1_wb
};

static unsigned char DYNAMIC_UI_3[] = {
	0xb0,
	0x00,
	0xa0,
	0x62,
};

static unsigned char DYNAMIC_UI_4[] = {
	0x62, // TCS
	0x21, // bypass, y_type
	0x01, // obj_sel, skin_boundary_para
	0x79, // skin_boundary_para
	0x00,
	0x01,
	0x00,
	0x04,
	0x01,
	0x1E,
	0x80,
	0x01,
	0x00,
	0x02,
	0x01, // grass_boundary_para
	0x00,
	0xF0,
	0x00,
	0x00,
	0x59,
	0x01,
	0x00,
	0xF0,
	0x00,
	0x00,
	0x59,
	0x01, // sky_boundary_para
	0x02,
	0x49,
	0x01,
	0x00,
	0x60,
	0x01,
	0x02,
	0x5A,
	0x01,
	0x00,
	0x63,
	0x00, // skin_boundary_para
	0x00,
	0xFF,
	0x00,
	0x00,
	0x86,
	0x00,
	0x11,
	0xAC,
	0x00,
	0x00,
	0xFF,
	0x00, // grass_boundary_para
	0x00,
	0x9F,
	0x00,
	0x00,
	0x33,
	0x00,
	0x00,
	0xF0,
	0x00,
	0x00,
	0x72,
	0x00, // sky_boundary_para
	0x01,
	0xAE,
	0x00,
	0x00,
	0x89,
	0x00,
	0x02,
	0x16,
	0x00,
	0x00,
	0xB3,
	0x00, // skin_boundary_para
	0x00,
	0x04,
	0x00,
	0x8F,
	0x00,
	0x01,
	0x00,
	0x87,
	0x01,
	0x02,
	0x22,
	0x00, // grass_boundary_para
	0x0B,
	0x24,
	0x00,
	0x0A,
	0x18,
	0x01,
	0x04,
	0x6A,
	0x01,
	0x06,
	0xCD,
	0x00, // sky_boundary_para
	0x04,
	0x98,
	0x00,
	0x0F,
	0xC1,
	0x01,
	0x06,
	0xE6,
	0x01,
	0x0A,
	0xE1,
	0x64, // skin_boundary_idx
	0x62, // grass_boundary_idx
	0x61, // sky_boundary_idx
	0x24, // Skin Color Gain
	0x80, // grass Color Gain
	0x80, // sky Color Gai
	0x80, // Target Skin Color (Cb)
	0x52, // Target grass Color (Cb)
	0xAE, // Target Sky Color (Cb)
	0x86, // Target Skin Color (Cr)
	0x69, // Target grass Color (Cr)
	0x58, // Target Sky Color (Cr)
	0x00, // Threshold Value of Skin Color Detection
	0x00, // Threshold Value of grass Color Detection
	0x00, // Threshold Value of Sky Color Detection
	0x32, // Minimum Y of Skin Brightness Control
	0x1E, // Minimum Y of grass Brightness Control
	0x1E, // Minimum Y of Sky Brightness Control
	0xDC, // Maximum Y of Skin Brightness Control
	0xC8, // Maximum Y of grass Brightness Control
	0xC8, // Maximum Y of Sky Brightness Control
	0x88, // Reference Y of Skin Brightness Control
	0x78, // Reference Y of grass Brightness Control
	0x78, // Reference Y of Sky Brightness Control
	0x8A, // Target Y of Skin Brihgtness Control
	0x78, // Target Y of grass Brihgtness Control
	0x78, // Target Y of Sky Brihgtness Control
	0x00, // Brightness Parameter
	0x24,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x8A,
	0x00,
	0x80,
	0x00,
	0x80,
	0x01,
	0x86,
	0x00,
	0x00,
	0x00,
	0x00,
	0x82,
	0xFA,
	0x80,
	0x00,
	0x80,
	0x00,
	0x7C,
	0xF4,
	0x80,
	0x00,
	0x80,
	0x00,
	0x00, // dummy 0x62 P326
	0x00, // dummy 0x62 P327
	0x00, // dummy 0x62 P328
	0x00, // dummy 0x62 P329
	0x00, // dummy 0x62 P330
	0x00, // ACE bypass : 0x01, ACE on : 0x00
	0xf0,
	0x03,
	0xff,
	0x04,
	0xc8,
	0xc8,
	0xff,
	0xff,
	0x28,
	0x28,
	0x3c,
	0x00,
	0x00,
	0x05,
	0x00,
	0x64,
	0x1e,
	0x1e,
	0x10,
	0x01,
	0x00,
	0x10,
	0x64,
	0x06,
	0x08,
	0x08,
	0x10,
	0x00,
	0x20,
	0x00,
	0x10,
	0x00,
	0x04,
	0x10,
	0x0a,
	0x00,
	0x00,
	0x00,
	0x02,
	0x00,
	0x04,
	0x00,
	0xff,
	0x00,
	0xff,
	0x00,
};

static unsigned char NATURAL_UI_1[] = {
	//start
	0x5D, // CRC
	0x06, // CRC on/off
	0x00,
	0x02, // TCS on/off
	0x00, // ACE on/off
	0x00, // ACE gain
	0x00, // ORE on/off
	0x00, // ORE level
};

static unsigned char NATURAL_UI_2[] = {
	0x62, // CRC
	0x00, // crc_bypass
	0xad, // crc_lut_mode1_rr
	0x05, // crc_lut_mode1_rg
	0x05, // crc_lut_mode1_rb
	0x3c, // crc_lut_mode1_gr
	0xee, // crc_lut_mode1_gg
	0x14, // crc_lut_mode1_gb
	0x06, // crc_lut_mode1_br
	0x09, // crc_lut_mode1_bg
	0xbc, // crc_lut_mode1_bb
	0x44, // crc_lut_mode1_cr
	0xea, // crc_lut_mode1_cg
	0xda, // crc_lut_mode1_cb
	0xbf, // crc_lut_mode1_mr
	0x0c, // crc_lut_mode1_mg
	0xc8, // crc_lut_mode1_mb
	0xe8, // crc_lut_mode1_yr
	0xde, // crc_lut_mode1_yg
	0x1a, // crc_lut_mode1_yb
	0xff, // crc_lut_mode1_wr
	0xfa, // crc_lut_mode1_wg
	0xf0, // crc_lut_mode1_wb
};

static unsigned char NATURAL_UI_3[] = {
	0xb0,
	0x00,
	0xa0,
	0x62,
};

static unsigned char NATURAL_UI_4[] = {
	0x62, // TCS
	0x21, // bypass, y_type
	0x01, // obj_sel, skin_boundary_para
	0x79, // skin_boundary_para
	0x00,
	0x01,
	0x00,
	0x04,
	0x01,
	0x1E,
	0x80,
	0x01,
	0x00,
	0x02,
	0x01, // grass_boundary_para
	0x00,
	0xF0,
	0x00,
	0x00,
	0x59,
	0x01,
	0x00,
	0xF0,
	0x00,
	0x00,
	0x59,
	0x01, // sky_boundary_para
	0x02,
	0x49,
	0x01,
	0x00,
	0x60,
	0x01,
	0x02,
	0x5A,
	0x01,
	0x00,
	0x63,
	0x00, // skin_boundary_para
	0x00,
	0xFF,
	0x00,
	0x00,
	0x86,
	0x00,
	0x11,
	0xAC,
	0x00,
	0x00,
	0xFF,
	0x00, // grass_boundary_para
	0x00,
	0x9F,
	0x00,
	0x00,
	0x33,
	0x00,
	0x00,
	0xF0,
	0x00,
	0x00,
	0x72,
	0x00, // sky_boundary_para
	0x01,
	0xAE,
	0x00,
	0x00,
	0x89,
	0x00,
	0x02,
	0x16,
	0x00,
	0x00,
	0xB3,
	0x00, // skin_boundary_para
	0x00,
	0x04,
	0x00,
	0x8F,
	0x00,
	0x01,
	0x00,
	0x87,
	0x01,
	0x02,
	0x22,
	0x00, // grass_boundary_para
	0x0B,
	0x24,
	0x00,
	0x0A,
	0x18,
	0x01,
	0x04,
	0x6A,
	0x01,
	0x06,
	0xCD,
	0x00, // sky_boundary_para
	0x04,
	0x98,
	0x00,
	0x0F,
	0xC1,
	0x01,
	0x06,
	0xE6,
	0x01,
	0x0A,
	0xE1,
	0x64, // skin_boundary_idx
	0x62, // grass_boundary_idx
	0x61, // sky_boundary_idx
	0x24, // Skin Color Gain
	0x80, // grass Color Gain
	0x80, // sky Color Gai
	0x80, // Target Skin Color (Cb)
	0x52, // Target grass Color (Cb)
	0xAE, // Target Sky Color (Cb)
	0x86, // Target Skin Color (Cr)
	0x69, // Target grass Color (Cr)
	0x58, // Target Sky Color (Cr)
	0x00, // Threshold Value of Skin Color Detection
	0x00, // Threshold Value of grass Color Detection
	0x00, // Threshold Value of Sky Color Detection
	0x32, // Minimum Y of Skin Brightness Control
	0x1E, // Minimum Y of grass Brightness Control
	0x1E, // Minimum Y of Sky Brightness Control
	0xDC, // Maximum Y of Skin Brightness Control
	0xC8, // Maximum Y of grass Brightness Control
	0xC8, // Maximum Y of Sky Brightness Control
	0x88, // Reference Y of Skin Brightness Control
	0x78, // Reference Y of grass Brightness Control
	0x78, // Reference Y of Sky Brightness Control
	0x8A, // Target Y of Skin Brihgtness Control
	0x78, // Target Y of grass Brihgtness Control
	0x78, // Target Y of Sky Brihgtness Control
	0x00, // Brightness Parameter
	0x24,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x8A,
	0x00,
	0x80,
	0x00,
	0x80,
	0x01,
	0x86,
	0x00,
	0x00,
	0x00,
	0x00,
	0x82,
	0xFA,
	0x80,
	0x00,
	0x80,
	0x00,
	0x7C,
	0xF4,
	0x80,
	0x00,
	0x80,
	0x00,
	0x00, // dummy 0x62 P326
	0x00, // dummy 0x62 P327
	0x00, // dummy 0x62 P328
	0x00, // dummy 0x62 P329
	0x00, // dummy 0x62 P330
	0x00, // ACE bypass : 0x01, ACE on : 0x00
	0xf0,
	0x03,
	0xff,
	0x04,
	0xc8,
	0xc8,
	0xff,
	0xff,
	0x28,
	0x28,
	0x3c,
	0x00,
	0x00,
	0x05,
	0x00,
	0x64,
	0x1e,
	0x1e,
	0x10,
	0x01,
	0x00,
	0x10,
	0x64,
	0x06,
	0x08,
	0x08,
	0x10,
	0x00,
	0x20,
	0x00,
	0x10,
	0x00,
	0x04,
	0x10,
	0x0a,
	0x00,
	0x00,
	0x00,
	0x02,
	0x00,
	0x04,
	0x00,
	0xff,
	0x00,
	0xff,
	0x00,
};

static unsigned char AUTO_UI_1[] = {
	//start
	0x5D, // CRC
	0x06, // CRC on/off
	0x00,
	0x02, // TCS on/off
	0x00, // ACE on/off
	0x00, // ACE gain
	0x00, // ORE on/off
	0x00, // ORE level
};

static unsigned char AUTO_UI_2[] = {
	0x62, // CRC
	0x00, // crc_bypass
	0xff, // crc_lut_mode1_rr
	0x00, // crc_lut_mode1_rg
	0x00, // crc_lut_mode1_rb
	0x00, // crc_lut_mode1_gr
	0xff, // crc_lut_mode1_gg
	0x00, // crc_lut_mode1_gb
	0x00, // crc_lut_mode1_br
	0x00, // crc_lut_mode1_bg
	0xff, // crc_lut_mode1_bb
	0x00, // crc_lut_mode1_cr
	0xff, // crc_lut_mode1_cg
	0xff, // crc_lut_mode1_cb
	0xff, // crc_lut_mode1_mr
	0x00, // crc_lut_mode1_mg
	0xff, // crc_lut_mode1_mb
	0xff, // crc_lut_mode1_yr
	0xff, // crc_lut_mode1_yg
	0x00, // crc_lut_mode1_yb
	0xff, // crc_lut_mode1_wr
	0xff, // crc_lut_mode1_wg
	0xff, // crc_lut_mode1_wb
};

static unsigned char AUTO_UI_3[] = {
	0xb0,
	0x00,
	0xa0,
	0x62,
};

static unsigned char AUTO_UI_4[] = {
	0x62, // TCS
	0x20, // bypass, y_type
	0x01, // obj_sel, skin_boundary_para
	0x79, // skin_boundary_para
	0x00,
	0x01,
	0x00,
	0x04,
	0x01,
	0x1E,
	0x80,
	0x01,
	0x00,
	0x02,
	0x01, // grass_boundary_para
	0x00,
	0xF0,
	0x00,
	0x00,
	0x59,
	0x01,
	0x00,
	0xF0,
	0x00,
	0x00,
	0x59,
	0x01, // sky_boundary_para
	0x02,
	0x49,
	0x01,
	0x00,
	0x60,
	0x01,
	0x02,
	0x5A,
	0x01,
	0x00,
	0x63,
	0x00, // skin_boundary_para
	0x00,
	0xFF,
	0x00,
	0x00,
	0x86,
	0x00,
	0x11,
	0xAC,
	0x00,
	0x00,
	0xFF,
	0x00, // grass_boundary_para
	0x00,
	0x9F,
	0x00,
	0x00,
	0x33,
	0x00,
	0x00,
	0xF0,
	0x00,
	0x00,
	0x72,
	0x00, // sky_boundary_para
	0x01,
	0xAE,
	0x00,
	0x00,
	0x89,
	0x00,
	0x02,
	0x16,
	0x00,
	0x00,
	0xB3,
	0x00, // skin_boundary_para
	0x00,
	0x04,
	0x00,
	0x8F,
	0x00,
	0x01,
	0x00,
	0x87,
	0x01,
	0x02,
	0x22,
	0x00, // grass_boundary_para
	0x0B,
	0x24,
	0x00,
	0x0A,
	0x18,
	0x01,
	0x04,
	0x6A,
	0x01,
	0x06,
	0xCD,
	0x00, // sky_boundary_para
	0x04,
	0x98,
	0x00,
	0x0F,
	0xC1,
	0x01,
	0x06,
	0xE6,
	0x01,
	0x0A,
	0xE1,
	0x64, // skin_boundary_idx
	0x62, // grass_boundary_idx
	0x61, // sky_boundary_idx
	0x12, // Skin Color Gain
	0x80, // grass Color Gain
	0x80, // sky Color Gai
	0x80, // Target Skin Color (Cb)
	0x52, // Target grass Color (Cb)
	0xAE, // Target Sky Color (Cb)
	0x86, // Target Skin Color (Cr)
	0x69, // Target grass Color (Cr)
	0x58, // Target Sky Color (Cr)
	0x00, // Threshold Value of Skin Color Detection
	0x00, // Threshold Value of grass Color Detection
	0x00, // Threshold Value of Sky Color Detection
	0x32, // Minimum Y of Skin Brightness Control
	0x1E, // Minimum Y of grass Brightness Control
	0x1E, // Minimum Y of Sky Brightness Control
	0xDC, // Maximum Y of Skin Brightness Control
	0xC8, // Maximum Y of grass Brightness Control
	0xC8, // Maximum Y of Sky Brightness Control
	0x88, // Reference Y of Skin Brightness Control
	0x78, // Reference Y of grass Brightness Control
	0x78, // Reference Y of Sky Brightness Control
	0x8A, // Target Y of Skin Brihgtness Control
	0x78, // Target Y of grass Brihgtness Control
	0x78, // Target Y of Sky Brihgtness Control
	0x00, // Brightness Parameter
	0x24,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x8A,
	0x00,
	0x80,
	0x00,
	0x80,
	0x01,
	0x86,
	0x00,
	0x00,
	0x00,
	0x00,
	0x82,
	0xFA,
	0x80,
	0x00,
	0x80,
	0x00,
	0x7C,
	0xF4,
	0x80,
	0x00,
	0x80,
	0x00,
	0x00, // dummy 0x62 P326
	0x00, // dummy 0x62 P327
	0x00, // dummy 0x62 P328
	0x00, // dummy 0x62 P329
	0x00, // dummy 0x62 P330
	0x00, // ACE bypass : 0x01, ACE on : 0x00
	0xf0,
	0x03,
	0xff,
	0x04,
	0xc8,
	0xc8,
	0xff,
	0xff,
	0x28,
	0x28,
	0x3c,
	0x00,
	0x00,
	0x05,
	0x00,
	0x64,
	0x1e,
	0x1e,
	0x10,
	0x01,
	0x00,
	0x10,
	0x64,
	0x06,
	0x08,
	0x08,
	0x10,
	0x00,
	0x20,
	0x00,
	0x10,
	0x00,
	0x04,
	0x10,
	0x0a,
	0x00,
	0x00,
	0x00,
	0x02,
	0x00,
	0x04,
	0x00,
	0xff,
	0x00,
	0xff,
	0x00,
};

/******************** GALLERY ********************/

static unsigned char AUTO_GALLERY_1[] = {
	//start
	0x5D, // CRC
	0x06, // CRC on/off
	0x00,
	0x02, // TCS on/off
	0x00, // ACE on/off
	0x00, // ACE gain
	0x00, // ORE on/off
	0x00, // ORE level
};

static unsigned char AUTO_GALLERY_2[] = {
	0x62, // CRC
	0x00, // crc_bypass
	0xff, // crc_lut_mode1_rr
	0x00, // crc_lut_mode1_rg
	0x00, // crc_lut_mode1_rb
	0x14, // crc_lut_mode1_gr
	0xff, // crc_lut_mode1_gg
	0x00, // crc_lut_mode1_gb
	0x00, // crc_lut_mode1_br
	0x00, // crc_lut_mode1_bg
	0xff, // crc_lut_mode1_bb
	0x00, // crc_lut_mode1_cr
	0xf0, // crc_lut_mode1_cg
	0xff, // crc_lut_mode1_cb
	0xff, // crc_lut_mode1_mr
	0x00, // crc_lut_mode1_mg
	0xff, // crc_lut_mode1_mb
	0xff, // crc_lut_mode1_yr
	0xff, // crc_lut_mode1_yg
	0x00, // crc_lut_mode1_yb
	0xff, // crc_lut_mode1_wr
	0xff, // crc_lut_mode1_wg
	0xff, // crc_lut_mode1_wb
};

static unsigned char AUTO_GALLERY_3[] = {
	0xb0,
	0x00,
	0xa0,
	0x62,
};

static unsigned char AUTO_GALLERY_4[] = {
	0x62, // TCS
	0x20, // bypass, y_type
	0x01, // obj_sel, skin_boundary_para
	0x79, // skin_boundary_para
	0x00,
	0x01,
	0x00,
	0x04,
	0x01,
	0x1E,
	0x80,
	0x01,
	0x00,
	0x02,
	0x01, // grass_boundary_para
	0x00,
	0xF0,
	0x00,
	0x00,
	0x59,
	0x01,
	0x00,
	0xF0,
	0x00,
	0x00,
	0x59,
	0x01, // sky_boundary_para
	0x02,
	0x49,
	0x01,
	0x00,
	0x60,
	0x01,
	0x02,
	0x5A,
	0x01,
	0x00,
	0x63,
	0x00, // skin_boundary_para
	0x00,
	0xFF,
	0x00,
	0x00,
	0x86,
	0x00,
	0x11,
	0xAC,
	0x00,
	0x00,
	0xFF,
	0x00, // grass_boundary_para
	0x00,
	0x9F,
	0x00,
	0x00,
	0x33,
	0x00,
	0x00,
	0xF0,
	0x00,
	0x00,
	0x72,
	0x00, // sky_boundary_para
	0x01,
	0xAE,
	0x00,
	0x00,
	0x89,
	0x00,
	0x02,
	0x16,
	0x00,
	0x00,
	0xB3,
	0x00, // skin_boundary_para
	0x00,
	0x04,
	0x00,
	0x8F,
	0x00,
	0x01,
	0x00,
	0x87,
	0x01,
	0x02,
	0x22,
	0x00, // grass_boundary_para
	0x0B,
	0x24,
	0x00,
	0x0A,
	0x18,
	0x01,
	0x04,
	0x6A,
	0x01,
	0x06,
	0xCD,
	0x00, // sky_boundary_para
	0x04,
	0x98,
	0x00,
	0x0F,
	0xC1,
	0x01,
	0x06,
	0xE6,
	0x01,
	0x0A,
	0xE1,
	0x64, // skin_boundary_idx
	0x62, // grass_boundary_idx
	0x61, // sky_boundary_idx
	0x24, // Skin Color Gain
	0x80, // grass Color Gain
	0x80, // sky Color Gai
	0x80, // Target Skin Color (Cb)
	0x52, // Target grass Color (Cb)
	0xAE, // Target Sky Color (Cb)
	0x86, // Target Skin Color (Cr)
	0x69, // Target grass Color (Cr)
	0x58, // Target Sky Color (Cr)
	0x00, // Threshold Value of Skin Color Detection
	0x00, // Threshold Value of grass Color Detection
	0x00, // Threshold Value of Sky Color Detection
	0x32, // Minimum Y of Skin Brightness Control
	0x1E, // Minimum Y of grass Brightness Control
	0x1E, // Minimum Y of Sky Brightness Control
	0xDC, // Maximum Y of Skin Brightness Control
	0xC8, // Maximum Y of grass Brightness Control
	0xC8, // Maximum Y of Sky Brightness Control
	0x88, // Reference Y of Skin Brightness Control
	0x78, // Reference Y of grass Brightness Control
	0x78, // Reference Y of Sky Brightness Control
	0x8A, // Target Y of Skin Brihgtness Control
	0x78, // Target Y of grass Brihgtness Control
	0x78, // Target Y of Sky Brihgtness Control
	0x00, // Brightness Parameter
	0x24,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x8A,
	0x00,
	0x80,
	0x00,
	0x80,
	0x01,
	0x86,
	0x00,
	0x00,
	0x00,
	0x00,
	0x82,
	0xFA,
	0x80,
	0x00,
	0x80,
	0x00,
	0x7C,
	0xF4,
	0x80,
	0x00,
	0x80,
	0x00,
	0x00, // dummy 0x62 P326
	0x00, // dummy 0x62 P327
	0x00, // dummy 0x62 P328
	0x00, // dummy 0x62 P329
	0x00, // dummy 0x62 P330
	0x00, // ACE bypass : 0x01, ACE on : 0x00
	0xf0,
	0x03,
	0xff,
	0x04,
	0xc8,
	0xc8,
	0xff,
	0xff,
	0x28,
	0x28,
	0x3c,
	0x00,
	0x00,
	0x05,
	0x00,
	0x64,
	0x1e,
	0x1e,
	0x10,
	0x01,
	0x00,
	0x10,
	0x64,
	0x06,
	0x08,
	0x08,
	0x10,
	0x00,
	0x20,
	0x00,
	0x10,
	0x00,
	0x04,
	0x10,
	0x0a,
	0x00,
	0x00,
	0x00,
	0x02,
	0x00,
	0x04,
	0x00,
	0xff,
	0x00,
	0xff,
	0x00,
};

/******************** VIDEO ********************/

/******************** VT ********************/

/******************** CAMERA ********************/

/******************** BROWSER ********************/

/******************** eBOOK ********************/

static unsigned char AUTO_EBOOK_1[] = {
	//start
	0x5D, // CRC
	0x06, // CRC on/off
	0x00,
	0x02, // TCS on/off
	0x00, // ACE on/off
	0x00, // ACE gain
	0x00, // ORE on/off
	0x00, // ORE level
};

static unsigned char AUTO_EBOOK_2[] = {
	0x62, // CRC
	0x00, // crc_bypass
	0xff, // crc_lut_mode1_rr
	0x00, // crc_lut_mode1_rg
	0x00, // crc_lut_mode1_rb
	0x14, // crc_lut_mode1_gr
	0xff, // crc_lut_mode1_gg
	0x00, // crc_lut_mode1_gb
	0x00, // crc_lut_mode1_br
	0x00, // crc_lut_mode1_bg
	0xff, // crc_lut_mode1_bb
	0x00, // crc_lut_mode1_cr
	0xf0, // crc_lut_mode1_cg
	0xff, // crc_lut_mode1_cb
	0xff, // crc_lut_mode1_mr
	0x00, // crc_lut_mode1_mg
	0xff, // crc_lut_mode1_mb
	0xff, // crc_lut_mode1_yr
	0xff, // crc_lut_mode1_yg
	0x00, // crc_lut_mode1_yb
	0xff, // crc_lut_mode1_wr
	0xef, // crc_lut_mode1_wg
	0xd6, // crc_lut_mode1_wb
};

static unsigned char AUTO_EBOOK_3[] = {
	0xb0,
	0x00,
	0xa0,
	0x62,
};

static unsigned char AUTO_EBOOK_4[] = {
	0x62, // TCS
	0x21, // bypass, y_type
	0x01, // obj_sel, skin_boundary_para
	0x79, // skin_boundary_para
	0x00,
	0x01,
	0x00,
	0x04,
	0x01,
	0x1E,
	0x80,
	0x01,
	0x00,
	0x02,
	0x01, // grass_boundary_para
	0x00,
	0xF0,
	0x00,
	0x00,
	0x59,
	0x01,
	0x00,
	0xF0,
	0x00,
	0x00,
	0x59,
	0x01, // sky_boundary_para
	0x02,
	0x49,
	0x01,
	0x00,
	0x60,
	0x01,
	0x02,
	0x5A,
	0x01,
	0x00,
	0x63,
	0x00, // skin_boundary_para
	0x00,
	0xFF,
	0x00,
	0x00,
	0x86,
	0x00,
	0x11,
	0xAC,
	0x00,
	0x00,
	0xFF,
	0x00, // grass_boundary_para
	0x00,
	0x9F,
	0x00,
	0x00,
	0x33,
	0x00,
	0x00,
	0xF0,
	0x00,
	0x00,
	0x72,
	0x00, // sky_boundary_para
	0x01,
	0xAE,
	0x00,
	0x00,
	0x89,
	0x00,
	0x02,
	0x16,
	0x00,
	0x00,
	0xB3,
	0x00, // skin_boundary_para
	0x00,
	0x04,
	0x00,
	0x8F,
	0x00,
	0x01,
	0x00,
	0x87,
	0x01,
	0x02,
	0x22,
	0x00, // grass_boundary_para
	0x0B,
	0x24,
	0x00,
	0x0A,
	0x18,
	0x01,
	0x04,
	0x6A,
	0x01,
	0x06,
	0xCD,
	0x00, // sky_boundary_para
	0x04,
	0x98,
	0x00,
	0x0F,
	0xC1,
	0x01,
	0x06,
	0xE6,
	0x01,
	0x0A,
	0xE1,
	0x64, // skin_boundary_idx
	0x62, // grass_boundary_idx
	0x61, // sky_boundary_idx
	0x24, // Skin Color Gain
	0x80, // grass Color Gain
	0x80, // sky Color Gai
	0x80, // Target Skin Color (Cb)
	0x52, // Target grass Color (Cb)
	0xAE, // Target Sky Color (Cb)
	0x86, // Target Skin Color (Cr)
	0x69, // Target grass Color (Cr)
	0x58, // Target Sky Color (Cr)
	0x00, // Threshold Value of Skin Color Detection
	0x00, // Threshold Value of grass Color Detection
	0x00, // Threshold Value of Sky Color Detection
	0x32, // Minimum Y of Skin Brightness Control
	0x1E, // Minimum Y of grass Brightness Control
	0x1E, // Minimum Y of Sky Brightness Control
	0xDC, // Maximum Y of Skin Brightness Control
	0xC8, // Maximum Y of grass Brightness Control
	0xC8, // Maximum Y of Sky Brightness Control
	0x88, // Reference Y of Skin Brightness Control
	0x78, // Reference Y of grass Brightness Control
	0x78, // Reference Y of Sky Brightness Control
	0x8A, // Target Y of Skin Brihgtness Control
	0x78, // Target Y of grass Brihgtness Control
	0x78, // Target Y of Sky Brihgtness Control
	0x00, // Brightness Parameter
	0x24,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x8A,
	0x00,
	0x80,
	0x00,
	0x80,
	0x01,
	0x86,
	0x00,
	0x00,
	0x00,
	0x00,
	0x82,
	0xFA,
	0x80,
	0x00,
	0x80,
	0x00,
	0x7C,
	0xF4,
	0x80,
	0x00,
	0x80,
	0x00,
	0x00, // dummy 0x62 P326
	0x00, // dummy 0x62 P327
	0x00, // dummy 0x62 P328
	0x00, // dummy 0x62 P329
	0x00, // dummy 0x62 P330
	0x00, // ACE bypass : 0x01, ACE on : 0x00
	0xf0,
	0x03,
	0xff,
	0x04,
	0xc8,
	0xc8,
	0xff,
	0xff,
	0x28,
	0x28,
	0x3c,
	0x00,
	0x00,
	0x05,
	0x00,
	0x64,
	0x1e,
	0x1e,
	0x10,
	0x01,
	0x00,
	0x10,
	0x64,
	0x06,
	0x08,
	0x08,
	0x10,
	0x00,
	0x20,
	0x00,
	0x10,
	0x00,
	0x04,
	0x10,
	0x0a,
	0x00,
	0x00,
	0x00,
	0x02,
	0x00,
	0x04,
	0x00,
	0xff,
	0x00,
	0xff,
	0x00,
};

/******************** DMB ********************/

#ifdef CONFIG_LCD_HMT

static unsigned char HMT_6500K_1[] = {
	0x5D, // CRC
	0x06, // CRC on/off
	0x00,
	0x02, // TCS on/off
	0x00, // ACE on/off
	0x00, // ACE gain
	0x00, // ORE on/off
	0x00, // ORE level
};

static unsigned char HMT_6500K_2[] = {
	0x62, // CRC
	0x00, // crc_bypass
	0xff, // crc_lut_mode1_rr
	0x00, // crc_lut_mode1_rg
	0x00, // crc_lut_mode1_rb
	0x00, // crc_lut_mode1_gr
	0xff, // crc_lut_mode1_gg
	0x00, // crc_lut_mode1_gb
	0x00, // crc_lut_mode1_br
	0x00, // crc_lut_mode1_bg
	0xf5, // crc_lut_mode1_bb
	0x00, // crc_lut_mode1_cr
	0xff, // crc_lut_mode1_cg
	0xff, // crc_lut_mode1_cb
	0xff, // crc_lut_mode1_mr
	0x00, // crc_lut_mode1_mg
	0xff, // crc_lut_mode1_mb
	0xff, // crc_lut_mode1_yr
	0xff, // crc_lut_mode1_yg
	0x00, // crc_lut_mode1_yb
	0xff, // crc_lut_mode1_wr
	0xfa, // crc_lut_mode1_wg
	0xf0, // crc_lut_mode1_wb
};

static unsigned char HMT_6500K_3[] = {
	0xb0,
	0x00,
	0xa0,
	0x62,
};

static unsigned char HMT_6500K_4[] = {
	0x62, // TCS
	0x21, // bypass, y_type
	0x01, // obj_sel, skin_boundary_para
	0x79, // skin_boundary_para
	0x00,
	0x01,
	0x00,
	0x04,
	0x01,
	0x1E,
	0x80,
	0x01,
	0x00,
	0x02,
	0x01, // grass_boundary_para
	0x00,
	0xF0,
	0x00,
	0x00,
	0x59,
	0x01,
	0x00,
	0xF0,
	0x00,
	0x00,
	0x59,
	0x01, // sky_boundary_para
	0x02,
	0x49,
	0x01,
	0x00,
	0x60,
	0x01,
	0x02,
	0x5A,
	0x01,
	0x00,
	0x63,
	0x00, // skin_boundary_para
	0x00,
	0xFF,
	0x00,
	0x00,
	0x86,
	0x00,
	0x11,
	0xAC,
	0x00,
	0x00,
	0xFF,
	0x00, // grass_boundary_para
	0x00,
	0x9F,
	0x00,
	0x00,
	0x33,
	0x00,
	0x00,
	0xF0,
	0x00,
	0x00,
	0x72,
	0x00, // sky_boundary_para
	0x01,
	0xAE,
	0x00,
	0x00,
	0x89,
	0x00,
	0x02,
	0x16,
	0x00,
	0x00,
	0xB3,
	0x00, // skin_boundary_para
	0x00,
	0x04,
	0x00,
	0x8F,
	0x00,
	0x01,
	0x00,
	0x87,
	0x01,
	0x02,
	0x22,
	0x00, // grass_boundary_para
	0x0B,
	0x24,
	0x00,
	0x0A,
	0x18,
	0x01,
	0x04,
	0x6A,
	0x01,
	0x06,
	0xCD,
	0x00, // sky_boundary_para
	0x04,
	0x98,
	0x00,
	0x0F,
	0xC1,
	0x01,
	0x06,
	0xE6,
	0x01,
	0x0A,
	0xE1,
	0x64, // skin_boundary_idx
	0x62, // grass_boundary_idx
	0x61, // sky_boundary_idx
	0x24, // Skin Color Gain
	0x80, // grass Color Gain
	0x80, // sky Color Gai
	0x80, // Target Skin Color (Cb)
	0x52, // Target grass Color (Cb)
	0xAE, // Target Sky Color (Cb)
	0x86, // Target Skin Color (Cr)
	0x69, // Target grass Color (Cr)
	0x58, // Target Sky Color (Cr)
	0x00, // Threshold Value of Skin Color Detection
	0x00, // Threshold Value of grass Color Detection
	0x00, // Threshold Value of Sky Color Detection
	0x32, // Minimum Y of Skin Brightness Control
	0x1E, // Minimum Y of grass Brightness Control
	0x1E, // Minimum Y of Sky Brightness Control
	0xDC, // Maximum Y of Skin Brightness Control
	0xC8, // Maximum Y of grass Brightness Control
	0xC8, // Maximum Y of Sky Brightness Control
	0x88, // Reference Y of Skin Brightness Control
	0x78, // Reference Y of grass Brightness Control
	0x78, // Reference Y of Sky Brightness Control
	0x8A, // Target Y of Skin Brihgtness Control
	0x78, // Target Y of grass Brihgtness Control
	0x78, // Target Y of Sky Brihgtness Control
	0x00, // Brightness Parameter
	0x24,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x8A,
	0x00,
	0x80,
	0x00,
	0x80,
	0x01,
	0x86,
	0x00,
	0x00,
	0x00,
	0x00,
	0x82,
	0xFA,
	0x80,
	0x00,
	0x80,
	0x00,
	0x7C,
	0xF4,
	0x80,
	0x00,
	0x80,
	0x00,
	0x00, // dummy 0x62 P326
	0x00, // dummy 0x62 P327
	0x00, // dummy 0x62 P328
	0x00, // dummy 0x62 P329
	0x00, // dummy 0x62 P330
	0x00, // ACE bypass : 0x01, ACE on : 0x00
	0xf0,
	0x03,
	0xff,
	0x04,
	0xc8,
	0xc8,
	0xff,
	0xff,
	0x28,
	0x28,
	0x3c,
	0x00,
	0x00,
	0x05,
	0x00,
	0x64,
	0x1e,
	0x1e,
	0x10,
	0x01,
	0x00,
	0x10,
	0x64,
	0x06,
	0x08,
	0x08,
	0x10,
	0x00,
	0x20,
	0x00,
	0x10,
	0x00,
	0x04,
	0x10,
	0x0a,
	0x00,
	0x00,
	0x00,
	0x02,
	0x00,
	0x04,
	0x00,
	0xff,
	0x00,
	0xff,
	0x00,
};

#endif

static unsigned char LOCAL_CE_1[] = {
	//start
	0x5D, // CRC
	0x06, // CRC on/off
	0x00,
	0x02, // TCS on/off
	0x02, // ACE on/off
	0x1f, // ACE gain
	0x02, // ORE on/off
	0x70, // ORE level
};

static unsigned char LOCAL_CE_2[] = {
	0x62, // CRC
	0x00, // crc_bypass
	0xff, // crc_lut_mode1_rr
	0x00, // crc_lut_mode1_rg
	0x00, // crc_lut_mode1_rb
	0x00, // crc_lut_mode1_gr
	0xff, // crc_lut_mode1_gg
	0x00, // crc_lut_mode1_gb
	0x00, // crc_lut_mode1_br
	0x00, // crc_lut_mode1_bg
	0xf5, // crc_lut_mode1_bb
	0x00, // crc_lut_mode1_cr
	0xff, // crc_lut_mode1_cg
	0xff, // crc_lut_mode1_cb
	0xff, // crc_lut_mode1_mr
	0x00, // crc_lut_mode1_mg
	0xff, // crc_lut_mode1_mb
	0xff, // crc_lut_mode1_yr
	0xff, // crc_lut_mode1_yg
	0x00, // crc_lut_mode1_yb
	0xff, // crc_lut_mode1_wr
	0xff, // crc_lut_mode1_wg
	0xff, // crc_lut_mode1_wb
};

static unsigned char LOCAL_CE_3[] = {
	0xb0,
	0x00,
	0xa0,
	0x62,
};

static unsigned char LOCAL_CE_4[] = {
	0x62, // TCS
	0x21, // bypass, y_type
	0x01, // obj_sel, skin_boundary_para
	0x79, // skin_boundary_para
	0x00,
	0x01,
	0x00,
	0x04,
	0x01,
	0x1E,
	0x80,
	0x01,
	0x00,
	0x02,
	0x01, // grass_boundary_para
	0x00,
	0xF0,
	0x00,
	0x00,
	0x59,
	0x01,
	0x00,
	0xF0,
	0x00,
	0x00,
	0x59,
	0x01, // sky_boundary_para
	0x02,
	0x49,
	0x01,
	0x00,
	0x60,
	0x01,
	0x02,
	0x5A,
	0x01,
	0x00,
	0x63,
	0x00, // skin_boundary_para
	0x00,
	0xFF,
	0x00,
	0x00,
	0x86,
	0x00,
	0x11,
	0xAC,
	0x00,
	0x00,
	0xFF,
	0x00, // grass_boundary_para
	0x00,
	0x9F,
	0x00,
	0x00,
	0x33,
	0x00,
	0x00,
	0xF0,
	0x00,
	0x00,
	0x72,
	0x00, // sky_boundary_para
	0x01,
	0xAE,
	0x00,
	0x00,
	0x89,
	0x00,
	0x02,
	0x16,
	0x00,
	0x00,
	0xB3,
	0x00, // skin_boundary_para
	0x00,
	0x04,
	0x00,
	0x8F,
	0x00,
	0x01,
	0x00,
	0x87,
	0x01,
	0x02,
	0x22,
	0x00, // grass_boundary_para
	0x0B,
	0x24,
	0x00,
	0x0A,
	0x18,
	0x01,
	0x04,
	0x6A,
	0x01,
	0x06,
	0xCD,
	0x00, // sky_boundary_para
	0x04,
	0x98,
	0x00,
	0x0F,
	0xC1,
	0x01,
	0x06,
	0xE6,
	0x01,
	0x0A,
	0xE1,
	0x64, // skin_boundary_idx
	0x62, // grass_boundary_idx
	0x61, // sky_boundary_idx
	0x24, // Skin Color Gain
	0x80, // grass Color Gain
	0x80, // sky Color Gai
	0x80, // Target Skin Color (Cb)
	0x52, // Target grass Color (Cb)
	0xAE, // Target Sky Color (Cb)
	0x86, // Target Skin Color (Cr)
	0x69, // Target grass Color (Cr)
	0x58, // Target Sky Color (Cr)
	0x00, // Threshold Value of Skin Color Detection
	0x00, // Threshold Value of grass Color Detection
	0x00, // Threshold Value of Sky Color Detection
	0x32, // Minimum Y of Skin Brightness Control
	0x1E, // Minimum Y of grass Brightness Control
	0x1E, // Minimum Y of Sky Brightness Control
	0xDC, // Maximum Y of Skin Brightness Control
	0xC8, // Maximum Y of grass Brightness Control
	0xC8, // Maximum Y of Sky Brightness Control
	0x88, // Reference Y of Skin Brightness Control
	0x78, // Reference Y of grass Brightness Control
	0x78, // Reference Y of Sky Brightness Control
	0x8A, // Target Y of Skin Brihgtness Control
	0x78, // Target Y of grass Brihgtness Control
	0x78, // Target Y of Sky Brihgtness Control
	0x00, // Brightness Parameter
	0x24,
	0x00,
	0x00,
	0x00,
	0x00,
	0x00,
	0x8A,
	0x00,
	0x80,
	0x00,
	0x80,
	0x01,
	0x86,
	0x00,
	0x00,
	0x00,
	0x00,
	0x82,
	0xFA,
	0x80,
	0x00,
	0x80,
	0x00,
	0x7C,
	0xF4,
	0x80,
	0x00,
	0x80,
	0x00,
	0x00, // dummy 0x62 P326
	0x00, // dummy 0x62 P327
	0x00, // dummy 0x62 P328
	0x00, // dummy 0x62 P329
	0x00, // dummy 0x62 P330
	0x00, // ACE bypass : 0x01, ACE on : 0x00
	0xf0,
	0x03,
	0xff,
	0x04,
	0xc8,
	0xc8,
	0xff,
	0xff,
	0x28,
	0x28,
	0x3c,
	0x00,
	0x00,
	0x05,
	0x00,
	0x64,
	0x1e,
	0x1e,
	0x10,
	0x01,
	0x00,
	0x10,
	0x64,
	0x06,
	0x08,
	0x08,
	0x10,
	0x00,
	0x20,
	0x00,
	0x10,
	0x00,
	0x04,
	0x10,
	0x0a,
	0x00,
	0x00,
	0x00,
	0x02,
	0x00,
	0x04,
	0x00,
	0xff,
	0x00,
	0xff,
	0x00,
};

static unsigned char LEVEL_0_UNLOCK[] = {
	0x9F,
	0xa5, 0xa5
};

static unsigned char LEVEL_0_LOCK[] = {
	0x9F,
	0x5a, 0x5a
};

static unsigned char LEVEL_1_UNLOCK[] = {
	0xF0,
	0x5a, 0x5a
};

static unsigned char LEVEL_1_LOCK[] = {
	0xF0,
	0xa5, 0xa5
};

static unsigned char MULTI_CMD_ON[] = {
	0x72,
	0x2c, 0x21
};

static unsigned char MULTI_CMD_OFF[] = {
	0x72,
	0x2c, 0x01
};

static unsigned char MULTI_CMD_DUMMY[] = {
	0x0A,
	0x00
};

#define MDNIE_SET(id)	\
{							\
	.name		= #id,				\
	.update_flag	= {0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0},			\
	.seq		= {				\
		{	.cmd = LEVEL_0_UNLOCK,	.len = ARRAY_SIZE(LEVEL_0_UNLOCK),	.sleep = 0,},	\
		{	.cmd = LEVEL_1_UNLOCK,	.len = ARRAY_SIZE(LEVEL_1_UNLOCK),	.sleep = 0,},	\
		{	.cmd = MULTI_CMD_ON,	.len = ARRAY_SIZE(MULTI_CMD_ON),	.sleep = 0,},	\
		{	.cmd = MULTI_CMD_DUMMY,	.len = ARRAY_SIZE(MULTI_CMD_DUMMY),	.sleep = 0,},	\
		{	.cmd = id##_1,		.len = ARRAY_SIZE(id##_1),		.sleep = 0,},	\
		{	.cmd = id##_2,		.len = ARRAY_SIZE(id##_2),		.sleep = 0,},	\
		{	.cmd = id##_3,		.len = ARRAY_SIZE(id##_3),		.sleep = 0,},	\
		{	.cmd = id##_4,		.len = ARRAY_SIZE(id##_4),		.sleep = 0,},	\
		{	.cmd = MULTI_CMD_OFF,	.len = ARRAY_SIZE(MULTI_CMD_OFF),	.sleep = 20000,},	\
		{	.cmd = MULTI_CMD_DUMMY,	.len = ARRAY_SIZE(MULTI_CMD_DUMMY),	.sleep = 0,},	\
		{	.cmd = LEVEL_0_LOCK,	.len = ARRAY_SIZE(LEVEL_0_LOCK),	.sleep = 0,},	\
		{	.cmd = LEVEL_1_LOCK,	.len = ARRAY_SIZE(LEVEL_1_LOCK),	.sleep = 0,},	\
	}	\
}

static struct mdnie_table bypass_table[BYPASS_MAX] = {
	[BYPASS_ON] = MDNIE_SET(BYPASS)
};

static struct mdnie_table accessibility_table[ACCESSIBILITY_MAX] = {
	[NEGATIVE] = MDNIE_SET(BYPASS),
	MDNIE_SET(BYPASS),
	MDNIE_SET(SCREEN_CURTAIN),
	MDNIE_SET(BYPASS),
	MDNIE_SET(BYPASS)
};

static struct mdnie_table hbm_table[HBM_MAX] = {
	[HBM_ON] = MDNIE_SET(LOCAL_CE)
};

#ifdef CONFIG_LCD_HMT
static struct mdnie_table hmt_table[HMT_MDNIE_MAX] = {
	[HMT_MDNIE_ON] = MDNIE_SET(HMT_6500K)
};
#endif

static struct mdnie_table dmb_table[MODE_MAX] = {
	MDNIE_SET(DYNAMIC_UI),
	MDNIE_SET(DYNAMIC_UI),
	MDNIE_SET(NATURAL_UI),
	MDNIE_SET(AUTO_GALLERY),
	MDNIE_SET(AUTO_GALLERY),
	MDNIE_SET(AUTO_EBOOK)
};

static struct mdnie_table night_table[NIGHT_MODE_MAX] = {
	[NIGHT_MODE_ON] = MDNIE_SET(NIGHT_MODE)
};

static struct mdnie_table lens_table[COLOR_LENS_MAX] = {
	[COLOR_LENS_ON] = MDNIE_SET(COLOR_LENS)
};

static struct mdnie_table light_notification_table[LIGHT_NOTIFICATION_MAX] = {
	[LIGHT_NOTIFICATION_ON] = MDNIE_SET(LIGHT_NOTIFICATION)
};

static struct mdnie_table main_table[SCENARIO_MAX][MODE_MAX] = {
	{
		MDNIE_SET(DYNAMIC_UI),
		MDNIE_SET(DYNAMIC_UI),
		MDNIE_SET(NATURAL_UI),
		MDNIE_SET(AUTO_UI),
		MDNIE_SET(AUTO_UI),
		MDNIE_SET(AUTO_EBOOK)
	}, {
		MDNIE_SET(DYNAMIC_UI),
		MDNIE_SET(DYNAMIC_UI),
		MDNIE_SET(NATURAL_UI),
		MDNIE_SET(AUTO_UI),
		MDNIE_SET(AUTO_GALLERY),
		MDNIE_SET(AUTO_EBOOK)
	},
	[CAMERA_MODE] = {
		MDNIE_SET(DYNAMIC_UI),
		MDNIE_SET(DYNAMIC_UI),
		MDNIE_SET(NATURAL_UI),
		MDNIE_SET(AUTO_UI),
		MDNIE_SET(AUTO_GALLERY),
		MDNIE_SET(AUTO_EBOOK)
	},
	[GALLERY_MODE] = {
		MDNIE_SET(DYNAMIC_UI),
		MDNIE_SET(DYNAMIC_UI),
		MDNIE_SET(NATURAL_UI),
		MDNIE_SET(AUTO_UI),
		MDNIE_SET(AUTO_GALLERY),
		MDNIE_SET(AUTO_EBOOK)
	}, {
		MDNIE_SET(DYNAMIC_UI),
		MDNIE_SET(DYNAMIC_UI),
		MDNIE_SET(NATURAL_UI),
		MDNIE_SET(AUTO_UI),
		MDNIE_SET(AUTO_UI),
		MDNIE_SET(AUTO_EBOOK)
	}, {
		MDNIE_SET(DYNAMIC_UI),
		MDNIE_SET(DYNAMIC_UI),
		MDNIE_SET(NATURAL_UI),
		MDNIE_SET(AUTO_UI),
		MDNIE_SET(AUTO_GALLERY),
		MDNIE_SET(AUTO_EBOOK)
	}, {
		MDNIE_SET(DYNAMIC_UI),
		MDNIE_SET(DYNAMIC_UI),
		MDNIE_SET(NATURAL_UI),
		MDNIE_SET(AUTO_UI),
		MDNIE_SET(AUTO_EBOOK),
		MDNIE_SET(AUTO_EBOOK)
	}, {
		MDNIE_SET(DYNAMIC_UI),
		MDNIE_SET(DYNAMIC_UI),
		MDNIE_SET(NATURAL_UI),
		MDNIE_SET(AUTO_UI),
		MDNIE_SET(AUTO_UI),
		MDNIE_SET(AUTO_EBOOK)
	}
};

#undef MDNIE_SET

static struct mdnie_tune tune_info = {
	.bypass_table = bypass_table,
	.accessibility_table = accessibility_table,
	.hbm_table = hbm_table,
	.night_table = night_table,
	.lens_table = lens_table,
	.light_notification_table = light_notification_table,

#ifdef CONFIG_LCD_HMT
	.hmt_table = hmt_table,
#endif
	.dmb_table = dmb_table,
	.main_table = main_table,

	.coordinate_table = coordinate_data,
	.adjust_ldu_table = adjust_ldu_data,
	.night_mode_table = night_mode_data,
	.color_lens_table = color_lens_data,
	.scr_info = &scr_info,
	.get_hbm_index = get_hbm_index,
	.night_info = &night_info,
	.color_lens_info = &color_lens_info,
	.color_offset = {NULL, color_offset_f1, color_offset_f2, color_offset_f3, color_offset_f4}
};
#endif
